{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to XTLS_CRUD's documentation! Installation Install from PyPI pip install xtls_crud Install from source (build using poetry) git clone cd xtls_crud poetry build pip install dist/xtls_crud-<version>-py3-none-any.whl Install from GitHub pip install git+hhttps://github.com/amiwrprez/xtls_crud.git Usage You can use this package as library or you can run local web server with to use API for CRUD operations. See examples below. Web You can run local web server with to use API for CRUD operations. Run web server xtls_crud web serve Run web server with custom parameters xtls_crud web serve --host=0.0.0.0 --port=8080 Swagger UI To see API docs, go to: /docs ReDoc To see API docs, go to: /redoc Use as library You can use this package as library. See examples below. Examples See examples for examples.","title":"Introduction"},{"location":"#welcome-to-xtls_cruds-documentation","text":"","title":"Welcome to XTLS_CRUD's documentation!"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-from-pypi","text":"pip install xtls_crud","title":"Install from PyPI"},{"location":"#install-from-source-build-using-poetry","text":"git clone cd xtls_crud poetry build pip install dist/xtls_crud-<version>-py3-none-any.whl","title":"Install from source (build using poetry)"},{"location":"#install-from-github","text":"pip install git+hhttps://github.com/amiwrprez/xtls_crud.git","title":"Install from GitHub"},{"location":"#usage","text":"You can use this package as library or you can run local web server with to use API for CRUD operations. See examples below.","title":"Usage"},{"location":"#web","text":"You can run local web server with to use API for CRUD operations.","title":"Web"},{"location":"#run-web-server","text":"xtls_crud web serve","title":"Run web server"},{"location":"#run-web-server-with-custom-parameters","text":"xtls_crud web serve --host=0.0.0.0 --port=8080","title":"Run web server with custom parameters"},{"location":"#swagger-ui","text":"To see API docs, go to: /docs","title":"Swagger UI"},{"location":"#redoc","text":"To see API docs, go to: /redoc","title":"ReDoc"},{"location":"#use-as-library","text":"You can use this package as library. See examples below.","title":"Use as library"},{"location":"#examples","text":"See examples for examples.","title":"Examples"},{"location":"examples/","text":"Create new record create_new.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from uuid import uuid4 from xtls_crud.utils.builders.inbounds_builder import EasyInboundBuilder from xtls_crud.database import crud async def main (): builder = EasyInboundBuilder () . with_user_id ( 1 ) . with_up ( \"1gb\" ) . with_down ( \"1gb\" ) . with_total ( 0 ) . with_remark ( \"TEST\" ) . with_enable ( True ) . with_expiry_time ( \"1D\" ) . with_listen ( \" \" ) . with_port ( 1234 ) . with_protocol ( \"vmess\" ) . with_uuid ( uuid4 ()) . with_network ( \"ws\" ) . with_security ( \"tls\" ) . with_server_name ( \"v2ray.my-site.com\" ) . with_ws_path ( \"/test\" ) . with_tag ( \"inbound-49428\" ) . with_sniffing ( True ) . build () _ = await crud . inbounds . create ( obj_in = builder ) print ( _ ) return _ if __name__ == '__main__' : import asyncio asyncio . run ( main ()) Get all records Get all records from table. fetch_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from uuid import uuid4 from xtls_crud.database import crud async def main (): _ = await crud . inbounds . get_multi () print ( _ ) return _ if __name__ == '__main__' : import asyncio asyncio . run ( main ())","title":"Examples"},{"location":"examples/#create-new-record","text":"create_new.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from uuid import uuid4 from xtls_crud.utils.builders.inbounds_builder import EasyInboundBuilder from xtls_crud.database import crud async def main (): builder = EasyInboundBuilder () . with_user_id ( 1 ) . with_up ( \"1gb\" ) . with_down ( \"1gb\" ) . with_total ( 0 ) . with_remark ( \"TEST\" ) . with_enable ( True ) . with_expiry_time ( \"1D\" ) . with_listen ( \" \" ) . with_port ( 1234 ) . with_protocol ( \"vmess\" ) . with_uuid ( uuid4 ()) . with_network ( \"ws\" ) . with_security ( \"tls\" ) . with_server_name ( \"v2ray.my-site.com\" ) . with_ws_path ( \"/test\" ) . with_tag ( \"inbound-49428\" ) . with_sniffing ( True ) . build () _ = await crud . inbounds . create ( obj_in = builder ) print ( _ ) return _ if __name__ == '__main__' : import asyncio asyncio . run ( main ())","title":"Create new record"},{"location":"examples/#get-all-records","text":"Get all records from table. fetch_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from uuid import uuid4 from xtls_crud.database import crud async def main (): _ = await crud . inbounds . get_multi () print ( _ ) return _ if __name__ == '__main__' : import asyncio asyncio . run ( main ())","title":"Get all records"},{"location":"reference/SUMMARY/","text":"commands constants byte_size time_info database crud crud_inbounds models inbounds schemas inbounds models inbounds easy_inbounds_builder inbounds settings sniffing stream_settings utils builders inbounds_builder","title":"SUMMARY"},{"location":"reference/commands/","text":"XTLS_CRUD CLI commands Run web server Run Webserver using default configurations xtls_crud web serve Run Webserver using custom configurations xtls_crud web serve --host = \"0.0.0.0\" --port = 8080 See Webserver help xtls_crud web serve --help","title":"commands"},{"location":"reference/commands/#xtls_crud.commands--xtls_crud-cli-commands","text":"","title":"XTLS_CRUD CLI commands"},{"location":"reference/commands/#xtls_crud.commands--run-web-server","text":"Run Webserver using default configurations xtls_crud web serve Run Webserver using custom configurations xtls_crud web serve --host = \"0.0.0.0\" --port = 8080","title":"Run web server"},{"location":"reference/commands/#xtls_crud.commands--see-webserver-help","text":"xtls_crud web serve --help","title":"See Webserver help"},{"location":"reference/constants/","text":"Constants for xtls_crud Byte Size Time Info","title":"constants"},{"location":"reference/constants/#xtls_crud.constants--constants-for-xtls_crud","text":"Byte Size Time Info","title":"Constants for xtls_crud"},{"location":"reference/constants/byte_size/","text":"ByteSize Constants, Types and Enums for xtls_crud This module contains constants, types and enums for byte sizes. Like: 1GB = 1 Gigabyte | 1TB = 1 Terabyte | 1PB = 1 Petabyte | 1EB = 1 Exabyte Size Bases: BaseModel Size Model Source code in xtls_crud/constants/byte_size.pyclass Size ( BaseModel ): \"\"\" Size Model \"\"\" name : str symbol : str bytes : int @root_validator () def upper_case_name ( cls , values ): values [ 'name' ] = values [ 'name' ] . upper () return values @root_validator () def upper_case_symbol ( cls , values ): values [ 'symbol' ] = values [ 'symbol' ] . upper () return values @root_validator () def positive_bytes ( cls , values ): if values [ 'bytes' ] < 0 : raise ValueError ( 'bytes must be positive' ) return values def __str__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . bytes } )\" def __repr__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . bytes } )\" def __eq__ ( self , other ): if isinstance ( other , Size ): return self . bytes == other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes == other if isinstance ( other , str ): return self . symbol == other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ne__ ( self , other ): return not self . __eq__ ( other ) def __lt__ ( self , other ): if isinstance ( other , Size ): return self . bytes < other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes < other if isinstance ( other , str ): raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __le__ ( self , other ): if isinstance ( other , Size ): return self . bytes <= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes <= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __gt__ ( self , other ): if isinstance ( other , Size ): return self . bytes > other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes > other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ge__ ( self , other ): if isinstance ( other , Size ): return self . bytes >= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes >= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __add__ ( self , other ): if isinstance ( other , Size ): return self . bytes + other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes + other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __sub__ ( self , other ): if isinstance ( other , Size ): return self . bytes - other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes - other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __mul__ ( self , other ): if isinstance ( other , Size ): return self . bytes * other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes * other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __truediv__ ( self , other ): if isinstance ( other , Size ): return self . bytes / other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes / other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __floordiv__ ( self , other ): if isinstance ( other , Size ): return self . bytes // other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes // other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __mod__ ( self , other ): if isinstance ( other , Size ): return self . bytes % other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes % other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __divmod__ ( self , other ): if isinstance ( other , Size ): return divmod ( self . bytes , other . bytes ) if isinstance ( other , int ) or isinstance ( other , float ): return divmod ( self . bytes , other ) raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __pow__ ( self , other ): if isinstance ( other , Size ): return self . bytes ** other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes ** other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __radd__ ( self , other ): return self . __add__ ( other ) def __rsub__ ( self , other ): return self . __sub__ ( other ) def __rmul__ ( self , other ): return self . __mul__ ( other ) def __rtruediv__ ( self , other ): return self . __truediv__ ( other ) def __rfloordiv__ ( self , other ): return self . __floordiv__ ( other ) def __rmod__ ( self , other ): return self . __mod__ ( other ) def __rdivmod__ ( self , other ): return self . __divmod__ ( other ) def __rpow__ ( self , other ): return self . __pow__ ( other ) def __iadd__ ( self , other ): if isinstance ( other , Size ): self . bytes += other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes += other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __isub__ ( self , other ): if isinstance ( other , Size ): self . bytes -= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes -= other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __imul__ ( self , other ): if isinstance ( other , Size ): self . bytes *= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes *= other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __itruediv__ ( self , other ): if isinstance ( other , Size ): self . bytes /= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes /= other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) SizeUnit Bases: Enum Enum for size units Source code in xtls_crud/constants/byte_size.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 class SizeUnit ( Enum ): \"\"\" Enum for size units \"\"\" BYTE = BYTE KILOBYTE = KILOBYTE MEGABYTE = MEGABYTE GIGABYTE = GIGABYTE TERABYTE = TERABYTE PETABYTE = PETABYTE EXABYTE = EXABYTE @property def name ( self ) -> str : \"\"\" Get the name of the unit Returns: str: The name of the unit \"\"\" return self . value . name @property def symbol ( self ) -> str : \"\"\" Get the symbol of the unit Returns: str: The symbol of the unit \"\"\" return self . value . symbol @property def bytes ( self ) -> int : \"\"\" Get the number of bytes in the unit Returns: int: The number of bytes in the unit \"\"\" return self . value . bytes @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the units Returns: list[str]: All the names of the units \"\"\" return [ unit . name for unit in cls ] @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the units Returns: list[str]: All the symbols of the units \"\"\" return [ unit . symbol for unit in cls ] @classmethod def all_bytes ( cls ) -> list [ int ]: \"\"\" Get all the number of bytes in the units Returns: list[int]: All the number of bytes in the units \"\"\" return [ unit . bytes for unit in cls ] @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the units by their names Returns: dict[str, str]: The symbols of the units mapped by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the units by their symbols Returns: dict[str, str]: The names of the units mapped by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_bytes_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their names Returns: dict[str, int]: The number of bytes in the units mapped by their names \"\"\" return { name : bytes for name , bytes in zip ( cls . all_names (), cls . all_bytes ())} # noqa @classmethod def map_bytes_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their symbols Returns: dict[str, int]: The number of bytes in the units mapped by their symbols \"\"\" return { symbol : bytes for symbol , bytes in zip ( cls . all_symbols (), cls . all_bytes ())} # noqa all_bytes () classmethod Get all the number of bytes in the units Returns: Type Description list [ int ] list[int]: All the number of bytes in the units Source code in xtls_crud/constants/byte_size.py 290 291 292 293 294 295 296 297 298 299 @classmethod def all_bytes ( cls ) -> list [ int ]: \"\"\" Get all the number of bytes in the units Returns: list[int]: All the number of bytes in the units \"\"\" return [ unit . bytes for unit in cls ] all_names () classmethod Get all the names of the units Returns: Type Description list [ str ] list[str]: All the names of the units Source code in xtls_crud/constants/byte_size.py 268 269 270 271 272 273 274 275 276 277 @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the units Returns: list[str]: All the names of the units \"\"\" return [ unit . name for unit in cls ] all_symbols () classmethod Get all the symbols of the units Returns: Type Description list [ str ] list[str]: All the symbols of the units Source code in xtls_crud/constants/byte_size.py 279 280 281 282 283 284 285 286 287 288 @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the units Returns: list[str]: All the symbols of the units \"\"\" return [ unit . symbol for unit in cls ] bytes () property Get the number of bytes in the unit Returns: Name Type Description int int The number of bytes in the unit Source code in xtls_crud/constants/byte_size.py 257 258 259 260 261 262 263 264 265 266 @property def bytes ( self ) -> int : \"\"\" Get the number of bytes in the unit Returns: int: The number of bytes in the unit \"\"\" return self . value . bytes map_bytes_by_name () classmethod Map the number of bytes in the units by their names Returns: Type Description dict [ str , int ] dict[str, int]: The number of bytes in the units mapped by their names Source code in xtls_crud/constants/byte_size.py 323 324 325 326 327 328 329 330 331 332 @classmethod def map_bytes_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their names Returns: dict[str, int]: The number of bytes in the units mapped by their names \"\"\" return { name : bytes for name , bytes in zip ( cls . all_names (), cls . all_bytes ())} # noqa map_bytes_by_symbol () classmethod Map the number of bytes in the units by their symbols Returns: Type Description dict [ str , int ] dict[str, int]: The number of bytes in the units mapped by their symbols Source code in xtls_crud/constants/byte_size.py 334 335 336 337 338 339 340 341 342 343 @classmethod def map_bytes_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their symbols Returns: dict[str, int]: The number of bytes in the units mapped by their symbols \"\"\" return { symbol : bytes for symbol , bytes in zip ( cls . all_symbols (), cls . all_bytes ())} # noqa map_names_by_symbol () classmethod Map the names of the units by their symbols Returns: Type Description dict [ str , str ] dict[str, str]: The names of the units mapped by their symbols Source code in xtls_crud/constants/byte_size.py 312 313 314 315 316 317 318 319 320 321 @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the units by their symbols Returns: dict[str, str]: The names of the units mapped by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} map_symbols_by_name () classmethod Map the symbols of the units by their names Returns: Type Description dict [ str , str ] dict[str, str]: The symbols of the units mapped by their names Source code in xtls_crud/constants/byte_size.py 301 302 303 304 305 306 307 308 309 310 @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the units by their names Returns: dict[str, str]: The symbols of the units mapped by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} name () property Get the name of the unit Returns: Name Type Description str str The name of the unit Source code in xtls_crud/constants/byte_size.py 235 236 237 238 239 240 241 242 243 244 @property def name ( self ) -> str : \"\"\" Get the name of the unit Returns: str: The name of the unit \"\"\" return self . value . name symbol () property Get the symbol of the unit Returns: Name Type Description str str The symbol of the unit Source code in xtls_crud/constants/byte_size.py 246 247 248 249 250 251 252 253 254 255 @property def symbol ( self ) -> str : \"\"\" Get the symbol of the unit Returns: str: The symbol of the unit \"\"\" return self . value . symbol from_string ( string ) Create a size from a string Parameters: Name Type Description Default string str The string to create the size from required Returns: Name Type Description Size Size The size (e.g. 100 MB) Raises: Type Description ValueError If the string is not a valid size TypeError If the string is not a string KeyError If the string is not a valid size unit Examples: >>> from_string ( '100 MB' ) MB (MEGABYTE) Source code in xtls_crud/constants/byte_size.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def from_string ( string : str ) -> Size : \"\"\" Create a size from a string Args: string (str): The string to create the size from Returns: Size: The size (e.g. 100 MB) Raises: ValueError: If the string is not a valid size TypeError: If the string is not a string KeyError: If the string is not a valid size unit Examples: >>> from_string('100 MB') MB (MEGABYTE) \"\"\" if not isinstance ( string , str ): raise TypeError ( f 'Expected str, got { type ( string ) } ' ) if not string : raise ValueError ( 'Cannot convert empty string to Size' ) string = string . upper () digits = int ( '' . join ( filter ( str . isdigit , string ))) unit = '' . join ( filter ( str . isalpha , string )) if not digits : raise ValueError ( 'Cannot convert string to Size' ) if not unit : raise ValueError ( 'Cannot convert string to Size' ) if ( unit not in SizeUnit . all_symbols ()) and ( unit not in SizeUnit . all_names ()): raise ValueError ( f 'Cannot convert string to Size: { unit =} | { SizeUnit . all_symbols () } | { SizeUnit . all_names () } ' ) symbol = SizeUnit . map_names_by_symbol ()[ unit ] bytes = SizeUnit . map_bytes_by_symbol ()[ unit ] # noqa return Size ( name = unit , symbol = symbol , bytes = bytes * digits )","title":"byte_size"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size--bytesize-constants-types-and-enums-for-xtls_crud","text":"This module contains constants, types and enums for byte sizes. Like: 1GB = 1 Gigabyte | 1TB = 1 Terabyte | 1PB = 1 Petabyte | 1EB = 1 Exabyte","title":"ByteSize Constants, Types and Enums for xtls_crud"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.Size","text":"Bases: BaseModel Size Model Source code in xtls_crud/constants/byte_size.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 class Size ( BaseModel ): \"\"\" Size Model \"\"\" name : str symbol : str bytes : int @root_validator () def upper_case_name ( cls , values ): values [ 'name' ] = values [ 'name' ] . upper () return values @root_validator () def upper_case_symbol ( cls , values ): values [ 'symbol' ] = values [ 'symbol' ] . upper () return values @root_validator () def positive_bytes ( cls , values ): if values [ 'bytes' ] < 0 : raise ValueError ( 'bytes must be positive' ) return values def __str__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . bytes } )\" def __repr__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . bytes } )\" def __eq__ ( self , other ): if isinstance ( other , Size ): return self . bytes == other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes == other if isinstance ( other , str ): return self . symbol == other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ne__ ( self , other ): return not self . __eq__ ( other ) def __lt__ ( self , other ): if isinstance ( other , Size ): return self . bytes < other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes < other if isinstance ( other , str ): raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __le__ ( self , other ): if isinstance ( other , Size ): return self . bytes <= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes <= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __gt__ ( self , other ): if isinstance ( other , Size ): return self . bytes > other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes > other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ge__ ( self , other ): if isinstance ( other , Size ): return self . bytes >= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes >= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __add__ ( self , other ): if isinstance ( other , Size ): return self . bytes + other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes + other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __sub__ ( self , other ): if isinstance ( other , Size ): return self . bytes - other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes - other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __mul__ ( self , other ): if isinstance ( other , Size ): return self . bytes * other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes * other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __truediv__ ( self , other ): if isinstance ( other , Size ): return self . bytes / other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes / other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __floordiv__ ( self , other ): if isinstance ( other , Size ): return self . bytes // other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes // other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __mod__ ( self , other ): if isinstance ( other , Size ): return self . bytes % other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes % other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __divmod__ ( self , other ): if isinstance ( other , Size ): return divmod ( self . bytes , other . bytes ) if isinstance ( other , int ) or isinstance ( other , float ): return divmod ( self . bytes , other ) raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __pow__ ( self , other ): if isinstance ( other , Size ): return self . bytes ** other . bytes if isinstance ( other , int ) or isinstance ( other , float ): return self . bytes ** other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __radd__ ( self , other ): return self . __add__ ( other ) def __rsub__ ( self , other ): return self . __sub__ ( other ) def __rmul__ ( self , other ): return self . __mul__ ( other ) def __rtruediv__ ( self , other ): return self . __truediv__ ( other ) def __rfloordiv__ ( self , other ): return self . __floordiv__ ( other ) def __rmod__ ( self , other ): return self . __mod__ ( other ) def __rdivmod__ ( self , other ): return self . __divmod__ ( other ) def __rpow__ ( self , other ): return self . __pow__ ( other ) def __iadd__ ( self , other ): if isinstance ( other , Size ): self . bytes += other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes += other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __isub__ ( self , other ): if isinstance ( other , Size ): self . bytes -= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes -= other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __imul__ ( self , other ): if isinstance ( other , Size ): self . bytes *= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes *= other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __itruediv__ ( self , other ): if isinstance ( other , Size ): self . bytes /= other . bytes if isinstance ( other , int ) or isinstance ( other , float ): self . bytes /= other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' )","title":"Size"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit","text":"Bases: Enum Enum for size units Source code in xtls_crud/constants/byte_size.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 class SizeUnit ( Enum ): \"\"\" Enum for size units \"\"\" BYTE = BYTE KILOBYTE = KILOBYTE MEGABYTE = MEGABYTE GIGABYTE = GIGABYTE TERABYTE = TERABYTE PETABYTE = PETABYTE EXABYTE = EXABYTE @property def name ( self ) -> str : \"\"\" Get the name of the unit Returns: str: The name of the unit \"\"\" return self . value . name @property def symbol ( self ) -> str : \"\"\" Get the symbol of the unit Returns: str: The symbol of the unit \"\"\" return self . value . symbol @property def bytes ( self ) -> int : \"\"\" Get the number of bytes in the unit Returns: int: The number of bytes in the unit \"\"\" return self . value . bytes @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the units Returns: list[str]: All the names of the units \"\"\" return [ unit . name for unit in cls ] @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the units Returns: list[str]: All the symbols of the units \"\"\" return [ unit . symbol for unit in cls ] @classmethod def all_bytes ( cls ) -> list [ int ]: \"\"\" Get all the number of bytes in the units Returns: list[int]: All the number of bytes in the units \"\"\" return [ unit . bytes for unit in cls ] @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the units by their names Returns: dict[str, str]: The symbols of the units mapped by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the units by their symbols Returns: dict[str, str]: The names of the units mapped by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_bytes_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their names Returns: dict[str, int]: The number of bytes in the units mapped by their names \"\"\" return { name : bytes for name , bytes in zip ( cls . all_names (), cls . all_bytes ())} # noqa @classmethod def map_bytes_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their symbols Returns: dict[str, int]: The number of bytes in the units mapped by their symbols \"\"\" return { symbol : bytes for symbol , bytes in zip ( cls . all_symbols (), cls . all_bytes ())} # noqa","title":"SizeUnit"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.all_bytes","text":"Get all the number of bytes in the units Returns: Type Description list [ int ] list[int]: All the number of bytes in the units Source code in xtls_crud/constants/byte_size.py 290 291 292 293 294 295 296 297 298 299 @classmethod def all_bytes ( cls ) -> list [ int ]: \"\"\" Get all the number of bytes in the units Returns: list[int]: All the number of bytes in the units \"\"\" return [ unit . bytes for unit in cls ]","title":"all_bytes()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.all_names","text":"Get all the names of the units Returns: Type Description list [ str ] list[str]: All the names of the units Source code in xtls_crud/constants/byte_size.py 268 269 270 271 272 273 274 275 276 277 @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the units Returns: list[str]: All the names of the units \"\"\" return [ unit . name for unit in cls ]","title":"all_names()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.all_symbols","text":"Get all the symbols of the units Returns: Type Description list [ str ] list[str]: All the symbols of the units Source code in xtls_crud/constants/byte_size.py 279 280 281 282 283 284 285 286 287 288 @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the units Returns: list[str]: All the symbols of the units \"\"\" return [ unit . symbol for unit in cls ]","title":"all_symbols()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.bytes","text":"Get the number of bytes in the unit Returns: Name Type Description int int The number of bytes in the unit Source code in xtls_crud/constants/byte_size.py 257 258 259 260 261 262 263 264 265 266 @property def bytes ( self ) -> int : \"\"\" Get the number of bytes in the unit Returns: int: The number of bytes in the unit \"\"\" return self . value . bytes","title":"bytes()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.map_bytes_by_name","text":"Map the number of bytes in the units by their names Returns: Type Description dict [ str , int ] dict[str, int]: The number of bytes in the units mapped by their names Source code in xtls_crud/constants/byte_size.py 323 324 325 326 327 328 329 330 331 332 @classmethod def map_bytes_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their names Returns: dict[str, int]: The number of bytes in the units mapped by their names \"\"\" return { name : bytes for name , bytes in zip ( cls . all_names (), cls . all_bytes ())} # noqa","title":"map_bytes_by_name()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.map_bytes_by_symbol","text":"Map the number of bytes in the units by their symbols Returns: Type Description dict [ str , int ] dict[str, int]: The number of bytes in the units mapped by their symbols Source code in xtls_crud/constants/byte_size.py 334 335 336 337 338 339 340 341 342 343 @classmethod def map_bytes_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of bytes in the units by their symbols Returns: dict[str, int]: The number of bytes in the units mapped by their symbols \"\"\" return { symbol : bytes for symbol , bytes in zip ( cls . all_symbols (), cls . all_bytes ())} # noqa","title":"map_bytes_by_symbol()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.map_names_by_symbol","text":"Map the names of the units by their symbols Returns: Type Description dict [ str , str ] dict[str, str]: The names of the units mapped by their symbols Source code in xtls_crud/constants/byte_size.py 312 313 314 315 316 317 318 319 320 321 @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the units by their symbols Returns: dict[str, str]: The names of the units mapped by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())}","title":"map_names_by_symbol()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.map_symbols_by_name","text":"Map the symbols of the units by their names Returns: Type Description dict [ str , str ] dict[str, str]: The symbols of the units mapped by their names Source code in xtls_crud/constants/byte_size.py 301 302 303 304 305 306 307 308 309 310 @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the units by their names Returns: dict[str, str]: The symbols of the units mapped by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())}","title":"map_symbols_by_name()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.name","text":"Get the name of the unit Returns: Name Type Description str str The name of the unit Source code in xtls_crud/constants/byte_size.py 235 236 237 238 239 240 241 242 243 244 @property def name ( self ) -> str : \"\"\" Get the name of the unit Returns: str: The name of the unit \"\"\" return self . value . name","title":"name()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.SizeUnit.symbol","text":"Get the symbol of the unit Returns: Name Type Description str str The symbol of the unit Source code in xtls_crud/constants/byte_size.py 246 247 248 249 250 251 252 253 254 255 @property def symbol ( self ) -> str : \"\"\" Get the symbol of the unit Returns: str: The symbol of the unit \"\"\" return self . value . symbol","title":"symbol()"},{"location":"reference/constants/byte_size/#xtls_crud.constants.byte_size.from_string","text":"Create a size from a string Parameters: Name Type Description Default string str The string to create the size from required Returns: Name Type Description Size Size The size (e.g. 100 MB) Raises: Type Description ValueError If the string is not a valid size TypeError If the string is not a string KeyError If the string is not a valid size unit Examples: >>> from_string ( '100 MB' ) MB (MEGABYTE) Source code in xtls_crud/constants/byte_size.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def from_string ( string : str ) -> Size : \"\"\" Create a size from a string Args: string (str): The string to create the size from Returns: Size: The size (e.g. 100 MB) Raises: ValueError: If the string is not a valid size TypeError: If the string is not a string KeyError: If the string is not a valid size unit Examples: >>> from_string('100 MB') MB (MEGABYTE) \"\"\" if not isinstance ( string , str ): raise TypeError ( f 'Expected str, got { type ( string ) } ' ) if not string : raise ValueError ( 'Cannot convert empty string to Size' ) string = string . upper () digits = int ( '' . join ( filter ( str . isdigit , string ))) unit = '' . join ( filter ( str . isalpha , string )) if not digits : raise ValueError ( 'Cannot convert string to Size' ) if not unit : raise ValueError ( 'Cannot convert string to Size' ) if ( unit not in SizeUnit . all_symbols ()) and ( unit not in SizeUnit . all_names ()): raise ValueError ( f 'Cannot convert string to Size: { unit =} | { SizeUnit . all_symbols () } | { SizeUnit . all_names () } ' ) symbol = SizeUnit . map_names_by_symbol ()[ unit ] bytes = SizeUnit . map_bytes_by_symbol ()[ unit ] # noqa return Size ( name = unit , symbol = symbol , bytes = bytes * digits )","title":"from_string()"},{"location":"reference/constants/time_info/","text":"Time Constants, Types and Enums for xtls_crud This module contains constants, types and enums for byte sizes. Like: 1d = 1 day | 1w = 1 week | 1mo = 1 month | 1y = 1 year Time Bases: BaseModel Time Model Source code in xtls_crud/constants/time_info.pyclass Time ( BaseModel ): \"\"\" Time Model \"\"\" name : str symbol : str seconds : int @root_validator () def upper_case_name ( cls , values ): values [ 'name' ] = values [ 'name' ] . upper () return values @root_validator () def upper_case_symbol ( cls , values ): values [ 'symbol' ] = values [ 'symbol' ] . upper () return values @root_validator () def positive_seconds ( cls , values ): if values [ 'seconds' ] < 0 : raise ValueError ( 'seconds must be positive' ) return values def __str__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . seconds } )\" def __repr__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . seconds } )\" def __eq__ ( self , other ): if isinstance ( other , Time ): return self . seconds == other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds == other if isinstance ( other , str ): return self . symbol == other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ne__ ( self , other ): return not self . __eq__ ( other ) def __lt__ ( self , other ): if isinstance ( other , Time ): return self . seconds < other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds < other if isinstance ( other , str ): raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __le__ ( self , other ): if isinstance ( other , Time ): return self . seconds <= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds <= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __gt__ ( self , other ): if isinstance ( other , Time ): return self . seconds > other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds > other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ge__ ( self , other ): if isinstance ( other , Time ): return self . seconds >= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds >= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __add__ ( self , other ): if isinstance ( other , Time ): return self . seconds + other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds + other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __sub__ ( self , other ): if isinstance ( other , Time ): return self . seconds - other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds - other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __mul__ ( self , other ): if isinstance ( other , Time ): return self . seconds * other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds * other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __truediv__ ( self , other ): if isinstance ( other , Time ): return self . seconds / other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds / other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __floordiv__ ( self , other ): if isinstance ( other , Time ): return self . seconds // other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds // other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __mod__ ( self , other ): if isinstance ( other , Time ): return self . seconds % other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds % other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __divmod__ ( self , other ): if isinstance ( other , Time ): return divmod ( self . seconds , other . seconds ) if isinstance ( other , int ) or isinstance ( other , float ): return divmod ( self . seconds , other ) raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __pow__ ( self , other ): if isinstance ( other , Time ): return self . seconds ** other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds ** other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __radd__ ( self , other ): return self . __add__ ( other ) def __rsub__ ( self , other ): return self . __sub__ ( other ) def __rmul__ ( self , other ): return self . __mul__ ( other ) def __rtruediv__ ( self , other ): return self . __truediv__ ( other ) def __rfloordiv__ ( self , other ): return self . __floordiv__ ( other ) def __rmod__ ( self , other ): return self . __mod__ ( other ) def __rdivmod__ ( self , other ): return self . __divmod__ ( other ) def __rpow__ ( self , other ): return self . __pow__ ( other ) def __iadd__ ( self , other ): if isinstance ( other , Time ): self . seconds += other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds += other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __isub__ ( self , other ): if isinstance ( other , Time ): self . seconds -= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds -= other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __imul__ ( self , other ): if isinstance ( other , Time ): self . seconds *= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds *= other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __itruediv__ ( self , other ): if isinstance ( other , Time ): self . seconds /= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds /= other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) TimeUnit Bases: Enum Enum for time units Source code in xtls_crud/constants/time_info.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 class TimeUnit ( Enum ): \"\"\" Enum for time units \"\"\" SECOND = SECOND MINUTE = MINUTE HOUR = HOUR DAY = DAY WEEK = WEEK MONTH = MONTH YEAR = YEAR @property def name ( self ) -> str : \"\"\" Get the name of the time unit Returns: str: The name of the time unit \"\"\" return self . value . name @property def symbol ( self ) -> str : \"\"\" Get the symbol of the time unit Returns: str: The symbol of the time unit \"\"\" return self . value . symbol @property def seconds ( self ) -> int : \"\"\" Get the number of seconds in the time unit Returns: int: The number of seconds in the time unit \"\"\" return self . value . seconds @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the time units Returns: list[str]: All the names of the time units \"\"\" return [ unit . name for unit in cls ] @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the time units Returns: list[str]: All the symbols of the time units \"\"\" return [ unit . symbol for unit in cls ] @classmethod def all_seconds ( cls ) -> list [ int ]: \"\"\" Get all the number of seconds in the time units Returns: list[int]: All the number of seconds in the time units \"\"\" return [ unit . seconds for unit in cls ] @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the time units by their names Returns: dict[str, str]: A dictionary mapping the symbols of the time units by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the time units by their symbols Returns: dict[str, str]: A dictionary mapping the names of the time units by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_seconds_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their names Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their names \"\"\" return { name : seconds for name , seconds in zip ( cls . all_names (), cls . all_seconds ())} @classmethod def map_seconds_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their symbols Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their symbols \"\"\" return { symbol : seconds for symbol , seconds in zip ( cls . all_symbols (), cls . all_seconds ())} all_names () classmethod Get all the names of the time units Returns: Type Description list [ str ] list[str]: All the names of the time units Source code in xtls_crud/constants/time_info.py 269 270 271 272 273 274 275 276 277 278 @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the time units Returns: list[str]: All the names of the time units \"\"\" return [ unit . name for unit in cls ] all_seconds () classmethod Get all the number of seconds in the time units Returns: Type Description list [ int ] list[int]: All the number of seconds in the time units Source code in xtls_crud/constants/time_info.py 291 292 293 294 295 296 297 298 299 300 @classmethod def all_seconds ( cls ) -> list [ int ]: \"\"\" Get all the number of seconds in the time units Returns: list[int]: All the number of seconds in the time units \"\"\" return [ unit . seconds for unit in cls ] all_symbols () classmethod Get all the symbols of the time units Returns: Type Description list [ str ] list[str]: All the symbols of the time units Source code in xtls_crud/constants/time_info.py 280 281 282 283 284 285 286 287 288 289 @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the time units Returns: list[str]: All the symbols of the time units \"\"\" return [ unit . symbol for unit in cls ] map_names_by_symbol () classmethod Map the names of the time units by their symbols Returns: Type Description dict [ str , str ] dict[str, str]: A dictionary mapping the names of the time units by their symbols Source code in xtls_crud/constants/time_info.py 313 314 315 316 317 318 319 320 321 322 @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the time units by their symbols Returns: dict[str, str]: A dictionary mapping the names of the time units by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} map_seconds_by_name () classmethod Map the number of seconds in the time units by their names Returns: Type Description dict [ str , int ] dict[str, int]: A dictionary mapping the number of seconds in the time units by their names Source code in xtls_crud/constants/time_info.py 324 325 326 327 328 329 330 331 332 333 @classmethod def map_seconds_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their names Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their names \"\"\" return { name : seconds for name , seconds in zip ( cls . all_names (), cls . all_seconds ())} map_seconds_by_symbol () classmethod Map the number of seconds in the time units by their symbols Returns: Type Description dict [ str , int ] dict[str, int]: A dictionary mapping the number of seconds in the time units by their symbols Source code in xtls_crud/constants/time_info.py 335 336 337 338 339 340 341 342 343 344 @classmethod def map_seconds_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their symbols Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their symbols \"\"\" return { symbol : seconds for symbol , seconds in zip ( cls . all_symbols (), cls . all_seconds ())} map_symbols_by_name () classmethod Map the symbols of the time units by their names Returns: Type Description dict [ str , str ] dict[str, str]: A dictionary mapping the symbols of the time units by their names Source code in xtls_crud/constants/time_info.py 302 303 304 305 306 307 308 309 310 311 @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the time units by their names Returns: dict[str, str]: A dictionary mapping the symbols of the time units by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} name () property Get the name of the time unit Returns: Name Type Description str str The name of the time unit Source code in xtls_crud/constants/time_info.py 236 237 238 239 240 241 242 243 244 245 @property def name ( self ) -> str : \"\"\" Get the name of the time unit Returns: str: The name of the time unit \"\"\" return self . value . name seconds () property Get the number of seconds in the time unit Returns: Name Type Description int int The number of seconds in the time unit Source code in xtls_crud/constants/time_info.py 258 259 260 261 262 263 264 265 266 267 @property def seconds ( self ) -> int : \"\"\" Get the number of seconds in the time unit Returns: int: The number of seconds in the time unit \"\"\" return self . value . seconds symbol () property Get the symbol of the time unit Returns: Name Type Description str str The symbol of the time unit Source code in xtls_crud/constants/time_info.py 247 248 249 250 251 252 253 254 255 256 @property def symbol ( self ) -> str : \"\"\" Get the symbol of the time unit Returns: str: The symbol of the time unit \"\"\" return self . value . symbol from_string ( string ) Create a time from a string Parameters: Name Type Description Default string str The string to create the time from required Returns: Name Type Description Time Time The time Raises: Type Description ValueError If the string is not a valid time TypeError If the string is not a string KeyError If the string is not a valid time unit Examples: >>> from_string ( '1s' ) Time('S', 'SECOND', 1) Source code in xtls_crud/constants/time_info.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def from_string ( string : str ) -> Time : \"\"\" Create a time from a string Args: string (str): The string to create the time from Returns: Time: The time Raises: ValueError: If the string is not a valid time TypeError: If the string is not a string KeyError: If the string is not a valid time unit Examples: >>> from_string('1s') Time('S', 'SECOND', 1) \"\"\" if not isinstance ( string , str ): raise TypeError ( f 'Expected str, got { type ( string ) } ' ) if not string : raise ValueError ( 'Cannot convert empty string to Time' ) string = string . upper () digits = int ( '' . join ( filter ( str . isdigit , string ))) unit = '' . join ( filter ( str . isalpha , string )) if not digits : raise ValueError ( 'Cannot convert string to Time' ) if not unit : raise ValueError ( 'Cannot convert string to Time' ) if ( unit not in TimeUnit . all_symbols ()) and ( unit not in TimeUnit . all_names ()): raise ValueError ( f 'Cannot convert string to Time: { unit =} | { TimeUnit . all_symbols () } | { TimeUnit . all_names () } ' ) symbol = TimeUnit . map_names_by_symbol ()[ unit ] seconds = TimeUnit . map_seconds_by_symbol ()[ unit ] return Time ( name = unit , symbol = symbol , seconds = seconds * digits )","title":"time_info"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info--time-constants-types-and-enums-for-xtls_crud","text":"This module contains constants, types and enums for byte sizes. Like: 1d = 1 day | 1w = 1 week | 1mo = 1 month | 1y = 1 year","title":"Time Constants, Types and Enums for xtls_crud"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.Time","text":"Bases: BaseModel Time Model Source code in xtls_crud/constants/time_info.pyclass Time ( BaseModel ): \"\"\" Time Model \"\"\" name : str symbol : str seconds : int @root_validator () def upper_case_name ( cls , values ): values [ 'name' ] = values [ 'name' ] . upper () return values @root_validator () def upper_case_symbol ( cls , values ): values [ 'symbol' ] = values [ 'symbol' ] . upper () return values @root_validator () def positive_seconds ( cls , values ): if values [ 'seconds' ] < 0 : raise ValueError ( 'seconds must be positive' ) return values def __str__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . seconds } )\" def __repr__ ( self ): return f \"Time(' { self . name } ', ' { self . symbol } ', { self . seconds } )\" def __eq__ ( self , other ): if isinstance ( other , Time ): return self . seconds == other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds == other if isinstance ( other , str ): return self . symbol == other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ne__ ( self , other ): return not self . __eq__ ( other ) def __lt__ ( self , other ): if isinstance ( other , Time ): return self . seconds < other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds < other if isinstance ( other , str ): raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __le__ ( self , other ): if isinstance ( other , Time ): return self . seconds <= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds <= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __gt__ ( self , other ): if isinstance ( other , Time ): return self . seconds > other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds > other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __ge__ ( self , other ): if isinstance ( other , Time ): return self . seconds >= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds >= other raise TypeError ( f 'Cannot compare { type ( self ) } with { type ( other ) } ' ) def __add__ ( self , other ): if isinstance ( other , Time ): return self . seconds + other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds + other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __sub__ ( self , other ): if isinstance ( other , Time ): return self . seconds - other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds - other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __mul__ ( self , other ): if isinstance ( other , Time ): return self . seconds * other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds * other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __truediv__ ( self , other ): if isinstance ( other , Time ): return self . seconds / other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds / other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __floordiv__ ( self , other ): if isinstance ( other , Time ): return self . seconds // other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds // other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' ) def __mod__ ( self , other ): if isinstance ( other , Time ): return self . seconds % other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds % other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __divmod__ ( self , other ): if isinstance ( other , Time ): return divmod ( self . seconds , other . seconds ) if isinstance ( other , int ) or isinstance ( other , float ): return divmod ( self . seconds , other ) raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __pow__ ( self , other ): if isinstance ( other , Time ): return self . seconds ** other . seconds if isinstance ( other , int ) or isinstance ( other , float ): return self . seconds ** other raise TypeError ( f 'Cannot mod { type ( self ) } with { type ( other ) } ' ) def __radd__ ( self , other ): return self . __add__ ( other ) def __rsub__ ( self , other ): return self . __sub__ ( other ) def __rmul__ ( self , other ): return self . __mul__ ( other ) def __rtruediv__ ( self , other ): return self . __truediv__ ( other ) def __rfloordiv__ ( self , other ): return self . __floordiv__ ( other ) def __rmod__ ( self , other ): return self . __mod__ ( other ) def __rdivmod__ ( self , other ): return self . __divmod__ ( other ) def __rpow__ ( self , other ): return self . __pow__ ( other ) def __iadd__ ( self , other ): if isinstance ( other , Time ): self . seconds += other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds += other raise TypeError ( f 'Cannot add { type ( self ) } with { type ( other ) } ' ) def __isub__ ( self , other ): if isinstance ( other , Time ): self . seconds -= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds -= other raise TypeError ( f 'Cannot subtract { type ( self ) } with { type ( other ) } ' ) def __imul__ ( self , other ): if isinstance ( other , Time ): self . seconds *= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds *= other raise TypeError ( f 'Cannot multiply { type ( self ) } with { type ( other ) } ' ) def __itruediv__ ( self , other ): if isinstance ( other , Time ): self . seconds /= other . seconds if isinstance ( other , int ) or isinstance ( other , float ): self . seconds /= other raise TypeError ( f 'Cannot divide { type ( self ) } with { type ( other ) } ' )","title":"Time"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit","text":"Bases: Enum Enum for time units Source code in xtls_crud/constants/time_info.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 class TimeUnit ( Enum ): \"\"\" Enum for time units \"\"\" SECOND = SECOND MINUTE = MINUTE HOUR = HOUR DAY = DAY WEEK = WEEK MONTH = MONTH YEAR = YEAR @property def name ( self ) -> str : \"\"\" Get the name of the time unit Returns: str: The name of the time unit \"\"\" return self . value . name @property def symbol ( self ) -> str : \"\"\" Get the symbol of the time unit Returns: str: The symbol of the time unit \"\"\" return self . value . symbol @property def seconds ( self ) -> int : \"\"\" Get the number of seconds in the time unit Returns: int: The number of seconds in the time unit \"\"\" return self . value . seconds @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the time units Returns: list[str]: All the names of the time units \"\"\" return [ unit . name for unit in cls ] @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the time units Returns: list[str]: All the symbols of the time units \"\"\" return [ unit . symbol for unit in cls ] @classmethod def all_seconds ( cls ) -> list [ int ]: \"\"\" Get all the number of seconds in the time units Returns: list[int]: All the number of seconds in the time units \"\"\" return [ unit . seconds for unit in cls ] @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the time units by their names Returns: dict[str, str]: A dictionary mapping the symbols of the time units by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the time units by their symbols Returns: dict[str, str]: A dictionary mapping the names of the time units by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())} @classmethod def map_seconds_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their names Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their names \"\"\" return { name : seconds for name , seconds in zip ( cls . all_names (), cls . all_seconds ())} @classmethod def map_seconds_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their symbols Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their symbols \"\"\" return { symbol : seconds for symbol , seconds in zip ( cls . all_symbols (), cls . all_seconds ())}","title":"TimeUnit"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.all_names","text":"Get all the names of the time units Returns: Type Description list [ str ] list[str]: All the names of the time units Source code in xtls_crud/constants/time_info.py 269 270 271 272 273 274 275 276 277 278 @classmethod def all_names ( cls ) -> list [ str ]: \"\"\" Get all the names of the time units Returns: list[str]: All the names of the time units \"\"\" return [ unit . name for unit in cls ]","title":"all_names()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.all_seconds","text":"Get all the number of seconds in the time units Returns: Type Description list [ int ] list[int]: All the number of seconds in the time units Source code in xtls_crud/constants/time_info.py 291 292 293 294 295 296 297 298 299 300 @classmethod def all_seconds ( cls ) -> list [ int ]: \"\"\" Get all the number of seconds in the time units Returns: list[int]: All the number of seconds in the time units \"\"\" return [ unit . seconds for unit in cls ]","title":"all_seconds()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.all_symbols","text":"Get all the symbols of the time units Returns: Type Description list [ str ] list[str]: All the symbols of the time units Source code in xtls_crud/constants/time_info.py 280 281 282 283 284 285 286 287 288 289 @classmethod def all_symbols ( cls ) -> list [ str ]: \"\"\" Get all the symbols of the time units Returns: list[str]: All the symbols of the time units \"\"\" return [ unit . symbol for unit in cls ]","title":"all_symbols()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.map_names_by_symbol","text":"Map the names of the time units by their symbols Returns: Type Description dict [ str , str ] dict[str, str]: A dictionary mapping the names of the time units by their symbols Source code in xtls_crud/constants/time_info.py 313 314 315 316 317 318 319 320 321 322 @classmethod def map_names_by_symbol ( cls ) -> dict [ str , str ]: \"\"\" Map the names of the time units by their symbols Returns: dict[str, str]: A dictionary mapping the names of the time units by their symbols \"\"\" return { symbol : name for name , symbol in zip ( cls . all_names (), cls . all_symbols ())}","title":"map_names_by_symbol()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.map_seconds_by_name","text":"Map the number of seconds in the time units by their names Returns: Type Description dict [ str , int ] dict[str, int]: A dictionary mapping the number of seconds in the time units by their names Source code in xtls_crud/constants/time_info.py 324 325 326 327 328 329 330 331 332 333 @classmethod def map_seconds_by_name ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their names Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their names \"\"\" return { name : seconds for name , seconds in zip ( cls . all_names (), cls . all_seconds ())}","title":"map_seconds_by_name()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.map_seconds_by_symbol","text":"Map the number of seconds in the time units by their symbols Returns: Type Description dict [ str , int ] dict[str, int]: A dictionary mapping the number of seconds in the time units by their symbols Source code in xtls_crud/constants/time_info.py 335 336 337 338 339 340 341 342 343 344 @classmethod def map_seconds_by_symbol ( cls ) -> dict [ str , int ]: \"\"\" Map the number of seconds in the time units by their symbols Returns: dict[str, int]: A dictionary mapping the number of seconds in the time units by their symbols \"\"\" return { symbol : seconds for symbol , seconds in zip ( cls . all_symbols (), cls . all_seconds ())}","title":"map_seconds_by_symbol()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.map_symbols_by_name","text":"Map the symbols of the time units by their names Returns: Type Description dict [ str , str ] dict[str, str]: A dictionary mapping the symbols of the time units by their names Source code in xtls_crud/constants/time_info.py 302 303 304 305 306 307 308 309 310 311 @classmethod def map_symbols_by_name ( cls ) -> dict [ str , str ]: \"\"\" Map the symbols of the time units by their names Returns: dict[str, str]: A dictionary mapping the symbols of the time units by their names \"\"\" return { name : symbol for name , symbol in zip ( cls . all_names (), cls . all_symbols ())}","title":"map_symbols_by_name()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.name","text":"Get the name of the time unit Returns: Name Type Description str str The name of the time unit Source code in xtls_crud/constants/time_info.py 236 237 238 239 240 241 242 243 244 245 @property def name ( self ) -> str : \"\"\" Get the name of the time unit Returns: str: The name of the time unit \"\"\" return self . value . name","title":"name()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.seconds","text":"Get the number of seconds in the time unit Returns: Name Type Description int int The number of seconds in the time unit Source code in xtls_crud/constants/time_info.py 258 259 260 261 262 263 264 265 266 267 @property def seconds ( self ) -> int : \"\"\" Get the number of seconds in the time unit Returns: int: The number of seconds in the time unit \"\"\" return self . value . seconds","title":"seconds()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.TimeUnit.symbol","text":"Get the symbol of the time unit Returns: Name Type Description str str The symbol of the time unit Source code in xtls_crud/constants/time_info.py 247 248 249 250 251 252 253 254 255 256 @property def symbol ( self ) -> str : \"\"\" Get the symbol of the time unit Returns: str: The symbol of the time unit \"\"\" return self . value . symbol","title":"symbol()"},{"location":"reference/constants/time_info/#xtls_crud.constants.time_info.from_string","text":"Create a time from a string Parameters: Name Type Description Default string str The string to create the time from required Returns: Name Type Description Time Time The time Raises: Type Description ValueError If the string is not a valid time TypeError If the string is not a string KeyError If the string is not a valid time unit Examples: >>> from_string ( '1s' ) Time('S', 'SECOND', 1) Source code in xtls_crud/constants/time_info.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 def from_string ( string : str ) -> Time : \"\"\" Create a time from a string Args: string (str): The string to create the time from Returns: Time: The time Raises: ValueError: If the string is not a valid time TypeError: If the string is not a string KeyError: If the string is not a valid time unit Examples: >>> from_string('1s') Time('S', 'SECOND', 1) \"\"\" if not isinstance ( string , str ): raise TypeError ( f 'Expected str, got { type ( string ) } ' ) if not string : raise ValueError ( 'Cannot convert empty string to Time' ) string = string . upper () digits = int ( '' . join ( filter ( str . isdigit , string ))) unit = '' . join ( filter ( str . isalpha , string )) if not digits : raise ValueError ( 'Cannot convert string to Time' ) if not unit : raise ValueError ( 'Cannot convert string to Time' ) if ( unit not in TimeUnit . all_symbols ()) and ( unit not in TimeUnit . all_names ()): raise ValueError ( f 'Cannot convert string to Time: { unit =} | { TimeUnit . all_symbols () } | { TimeUnit . all_names () } ' ) symbol = TimeUnit . map_names_by_symbol ()[ unit ] seconds = TimeUnit . map_seconds_by_symbol ()[ unit ] return Time ( name = unit , symbol = symbol , seconds = seconds * digits )","title":"from_string()"},{"location":"reference/database/","text":"XTLS CRUD CRUD Models Schemas","title":"database"},{"location":"reference/database/#xtls_crud.database--xtls-crud","text":"CRUD Models Schemas","title":"XTLS CRUD"},{"location":"reference/database/crud/","text":"XTLS_CRUD crud functions inbounds","title":"crud"},{"location":"reference/database/crud/#xtls_crud.database.crud--xtls_crud-crud-functions","text":"inbounds","title":"XTLS_CRUD crud functions"},{"location":"reference/database/crud/crud_inbounds/","text":"CRUDInbounds Bases: CRUDBase [ Inbounds , InboundsCreate , InboundsUpdate ] CRUD for Inbounds Table Source code in xtls_crud/database/crud/crud_inbounds.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 class CRUDInbounds ( CRUDBase [ Inbounds , InboundsCreate , InboundsUpdate ]): \"\"\" CRUD for Inbounds Table \"\"\" async def create ( self , * , obj_in : InboundsCreate ) -> Inbounds : \"\"\" Create a new Inbounds Args: obj_in (InboundsCreate): New Inbound object model Returns: Inbounds (Inbounds): Inbound object model \"\"\" db_obj = Inbounds ( user_id = obj_in . user_id , up = obj_in . up , down = obj_in . down , total = obj_in . total , remark = obj_in . remark , enable = obj_in . enable , expiry_time = obj_in . expiry_time , listen = obj_in . listen , port = obj_in . port , protocol = obj_in . protocol , settings = obj_in . settings , stream_settings = obj_in . stream_settings , tag = obj_in . tag , sniffing = obj_in . sniffing , ) self . session . add ( db_obj ) await self . session . commit () await self . session . refresh ( db_obj ) return db_obj async def update ( self , * , db_obj : Inbounds , obj_in : Union [ InboundsUpdate , Dict [ str , Any ]] ): \"\"\" Update Inbounds Args: db_obj (Inbounds): Inbound object model obj_in (Union[InboundsUpdate, Dict[str, Any]]): Inbound object model Returns: Inbounds (Inbounds): Newly Inbound object model \"\"\" if isinstance ( obj_in , dict ): update_data = obj_in else : update_data = obj_in . dict ( exclude_unset = True ) for k , v in update_data . items (): update_data [ k ] = v return await super () . update ( db_obj = db_obj , obj_in = update_data ) async def get_by_user_id ( self , * , user_id : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by user_id Args: user_id (int): User ID Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( user_id = user_id ))) . scalar_one_or_none () async def get_by_remark ( self , * , remark : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by remark Args: remark (str): Remark Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( remark = remark ))) . scalar_one_or_none () async def get_by_tag ( self , * , tag : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by tag Args: tag (str): Tag Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( tag = tag ))) . scalar_one_or_none () async def get_by_port ( self , * , port : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by port Args: port (int): Port Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( port = port ))) . scalar_one_or_none () async def get_by_protocol ( self , * , protocol : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by protocol Args: protocol (str): Protocol Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( protocol = protocol ))) . scalar_one_or_none () create ( * , obj_in ) async Create a new Inbounds Parameters: Name Type Description Default obj_in InboundsCreate New Inbound object model required Returns: Name Type Description Inbounds Inbounds Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def create ( self , * , obj_in : InboundsCreate ) -> Inbounds : \"\"\" Create a new Inbounds Args: obj_in (InboundsCreate): New Inbound object model Returns: Inbounds (Inbounds): Inbound object model \"\"\" db_obj = Inbounds ( user_id = obj_in . user_id , up = obj_in . up , down = obj_in . down , total = obj_in . total , remark = obj_in . remark , enable = obj_in . enable , expiry_time = obj_in . expiry_time , listen = obj_in . listen , port = obj_in . port , protocol = obj_in . protocol , settings = obj_in . settings , stream_settings = obj_in . stream_settings , tag = obj_in . tag , sniffing = obj_in . sniffing , ) self . session . add ( db_obj ) await self . session . commit () await self . session . refresh ( db_obj ) return db_obj get_by_port ( * , port ) async Get Inbounds by port Parameters: Name Type Description Default port int Port required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 111 112 113 114 115 116 117 118 119 120 121 122 async def get_by_port ( self , * , port : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by port Args: port (int): Port Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( port = port ))) . scalar_one_or_none () get_by_protocol ( * , protocol ) async Get Inbounds by protocol Parameters: Name Type Description Default protocol str Protocol required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 124 125 126 127 128 129 130 131 132 133 134 135 async def get_by_protocol ( self , * , protocol : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by protocol Args: protocol (str): Protocol Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( protocol = protocol ))) . scalar_one_or_none () get_by_remark ( * , remark ) async Get Inbounds by remark Parameters: Name Type Description Default remark str Remark required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 85 86 87 88 89 90 91 92 93 94 95 96 async def get_by_remark ( self , * , remark : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by remark Args: remark (str): Remark Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( remark = remark ))) . scalar_one_or_none () get_by_tag ( * , tag ) async Get Inbounds by tag Parameters: Name Type Description Default tag str Tag required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 98 99 100 101 102 103 104 105 106 107 108 109 async def get_by_tag ( self , * , tag : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by tag Args: tag (str): Tag Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( tag = tag ))) . scalar_one_or_none () get_by_user_id ( * , user_id ) async Get Inbounds by user_id Parameters: Name Type Description Default user_id int User ID required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 72 73 74 75 76 77 78 79 80 81 82 83 async def get_by_user_id ( self , * , user_id : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by user_id Args: user_id (int): User ID Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( user_id = user_id ))) . scalar_one_or_none () update ( * , db_obj , obj_in ) async Update Inbounds Parameters: Name Type Description Default db_obj Inbounds Inbound object model required obj_in Union [ InboundsUpdate , Dict [ str , Any ]] Inbound object model required Returns: Name Type Description Inbounds Inbounds Newly Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def update ( self , * , db_obj : Inbounds , obj_in : Union [ InboundsUpdate , Dict [ str , Any ]] ): \"\"\" Update Inbounds Args: db_obj (Inbounds): Inbound object model obj_in (Union[InboundsUpdate, Dict[str, Any]]): Inbound object model Returns: Inbounds (Inbounds): Newly Inbound object model \"\"\" if isinstance ( obj_in , dict ): update_data = obj_in else : update_data = obj_in . dict ( exclude_unset = True ) for k , v in update_data . items (): update_data [ k ] = v return await super () . update ( db_obj = db_obj , obj_in = update_data )","title":"crud_inbounds"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds","text":"Bases: CRUDBase [ Inbounds , InboundsCreate , InboundsUpdate ] CRUD for Inbounds Table Source code in xtls_crud/database/crud/crud_inbounds.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 class CRUDInbounds ( CRUDBase [ Inbounds , InboundsCreate , InboundsUpdate ]): \"\"\" CRUD for Inbounds Table \"\"\" async def create ( self , * , obj_in : InboundsCreate ) -> Inbounds : \"\"\" Create a new Inbounds Args: obj_in (InboundsCreate): New Inbound object model Returns: Inbounds (Inbounds): Inbound object model \"\"\" db_obj = Inbounds ( user_id = obj_in . user_id , up = obj_in . up , down = obj_in . down , total = obj_in . total , remark = obj_in . remark , enable = obj_in . enable , expiry_time = obj_in . expiry_time , listen = obj_in . listen , port = obj_in . port , protocol = obj_in . protocol , settings = obj_in . settings , stream_settings = obj_in . stream_settings , tag = obj_in . tag , sniffing = obj_in . sniffing , ) self . session . add ( db_obj ) await self . session . commit () await self . session . refresh ( db_obj ) return db_obj async def update ( self , * , db_obj : Inbounds , obj_in : Union [ InboundsUpdate , Dict [ str , Any ]] ): \"\"\" Update Inbounds Args: db_obj (Inbounds): Inbound object model obj_in (Union[InboundsUpdate, Dict[str, Any]]): Inbound object model Returns: Inbounds (Inbounds): Newly Inbound object model \"\"\" if isinstance ( obj_in , dict ): update_data = obj_in else : update_data = obj_in . dict ( exclude_unset = True ) for k , v in update_data . items (): update_data [ k ] = v return await super () . update ( db_obj = db_obj , obj_in = update_data ) async def get_by_user_id ( self , * , user_id : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by user_id Args: user_id (int): User ID Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( user_id = user_id ))) . scalar_one_or_none () async def get_by_remark ( self , * , remark : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by remark Args: remark (str): Remark Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( remark = remark ))) . scalar_one_or_none () async def get_by_tag ( self , * , tag : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by tag Args: tag (str): Tag Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( tag = tag ))) . scalar_one_or_none () async def get_by_port ( self , * , port : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by port Args: port (int): Port Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( port = port ))) . scalar_one_or_none () async def get_by_protocol ( self , * , protocol : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by protocol Args: protocol (str): Protocol Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( protocol = protocol ))) . scalar_one_or_none ()","title":"CRUDInbounds"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.create","text":"Create a new Inbounds Parameters: Name Type Description Default obj_in InboundsCreate New Inbound object model required Returns: Name Type Description Inbounds Inbounds Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 async def create ( self , * , obj_in : InboundsCreate ) -> Inbounds : \"\"\" Create a new Inbounds Args: obj_in (InboundsCreate): New Inbound object model Returns: Inbounds (Inbounds): Inbound object model \"\"\" db_obj = Inbounds ( user_id = obj_in . user_id , up = obj_in . up , down = obj_in . down , total = obj_in . total , remark = obj_in . remark , enable = obj_in . enable , expiry_time = obj_in . expiry_time , listen = obj_in . listen , port = obj_in . port , protocol = obj_in . protocol , settings = obj_in . settings , stream_settings = obj_in . stream_settings , tag = obj_in . tag , sniffing = obj_in . sniffing , ) self . session . add ( db_obj ) await self . session . commit () await self . session . refresh ( db_obj ) return db_obj","title":"create()"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.get_by_port","text":"Get Inbounds by port Parameters: Name Type Description Default port int Port required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 111 112 113 114 115 116 117 118 119 120 121 122 async def get_by_port ( self , * , port : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by port Args: port (int): Port Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( port = port ))) . scalar_one_or_none ()","title":"get_by_port()"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.get_by_protocol","text":"Get Inbounds by protocol Parameters: Name Type Description Default protocol str Protocol required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 124 125 126 127 128 129 130 131 132 133 134 135 async def get_by_protocol ( self , * , protocol : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by protocol Args: protocol (str): Protocol Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( protocol = protocol ))) . scalar_one_or_none ()","title":"get_by_protocol()"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.get_by_remark","text":"Get Inbounds by remark Parameters: Name Type Description Default remark str Remark required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 85 86 87 88 89 90 91 92 93 94 95 96 async def get_by_remark ( self , * , remark : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by remark Args: remark (str): Remark Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( remark = remark ))) . scalar_one_or_none ()","title":"get_by_remark()"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.get_by_tag","text":"Get Inbounds by tag Parameters: Name Type Description Default tag str Tag required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 98 99 100 101 102 103 104 105 106 107 108 109 async def get_by_tag ( self , * , tag : str ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by tag Args: tag (str): Tag Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( tag = tag ))) . scalar_one_or_none ()","title":"get_by_tag()"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.get_by_user_id","text":"Get Inbounds by user_id Parameters: Name Type Description Default user_id int User ID required Returns: Name Type Description Inbounds Optional [ Inbounds ] Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 72 73 74 75 76 77 78 79 80 81 82 83 async def get_by_user_id ( self , * , user_id : int ) -> Optional [ Inbounds ]: \"\"\" Get Inbounds by user_id Args: user_id (int): User ID Returns: Inbounds (Optional[Inbounds]): Inbound object model \"\"\" return ( await self . session . execute ( select ( Inbounds ) . filter_by ( user_id = user_id ))) . scalar_one_or_none ()","title":"get_by_user_id()"},{"location":"reference/database/crud/crud_inbounds/#xtls_crud.database.crud.crud_inbounds.CRUDInbounds.update","text":"Update Inbounds Parameters: Name Type Description Default db_obj Inbounds Inbound object model required obj_in Union [ InboundsUpdate , Dict [ str , Any ]] Inbound object model required Returns: Name Type Description Inbounds Inbounds Newly Inbound object model Source code in xtls_crud/database/crud/crud_inbounds.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def update ( self , * , db_obj : Inbounds , obj_in : Union [ InboundsUpdate , Dict [ str , Any ]] ): \"\"\" Update Inbounds Args: db_obj (Inbounds): Inbound object model obj_in (Union[InboundsUpdate, Dict[str, Any]]): Inbound object model Returns: Inbounds (Inbounds): Newly Inbound object model \"\"\" if isinstance ( obj_in , dict ): update_data = obj_in else : update_data = obj_in . dict ( exclude_unset = True ) for k , v in update_data . items (): update_data [ k ] = v return await super () . update ( db_obj = db_obj , obj_in = update_data )","title":"update()"},{"location":"reference/database/models/","text":"XTLS_CRUD database models Inbounds","title":"models"},{"location":"reference/database/models/#xtls_crud.database.models--xtls_crud-database-models","text":"Inbounds","title":"XTLS_CRUD database models"},{"location":"reference/database/models/inbounds/","text":"Inbounds Bases: Base Inbounds table model Source code in xtls_crud/database/models/inbounds.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Inbounds ( Base ): \"\"\" Inbounds table model \"\"\" __name__ = 'inbounds' id = Column ( Integer , primary_key = True , autoincrement = True , nullable = False , server_default = text ( \"nextval('inbounds_id_seq'::regclass)\" )) user_id = Column ( Integer ) up = Column ( Integer ) down = Column ( Integer ) total = Column ( Integer ) remark = Column ( String ) enable = Column ( Boolean ) expiry_time = Column ( Integer ) listen = Column ( String ) port = Column ( Integer , unique = True ) protocol = Column ( String ) settings = Column ( String ) stream_settings = Column ( String ) tag = Column ( String , unique = True ) sniffing = Column ( String )","title":"inbounds"},{"location":"reference/database/models/inbounds/#xtls_crud.database.models.inbounds.Inbounds","text":"Bases: Base Inbounds table model Source code in xtls_crud/database/models/inbounds.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Inbounds ( Base ): \"\"\" Inbounds table model \"\"\" __name__ = 'inbounds' id = Column ( Integer , primary_key = True , autoincrement = True , nullable = False , server_default = text ( \"nextval('inbounds_id_seq'::regclass)\" )) user_id = Column ( Integer ) up = Column ( Integer ) down = Column ( Integer ) total = Column ( Integer ) remark = Column ( String ) enable = Column ( Boolean ) expiry_time = Column ( Integer ) listen = Column ( String ) port = Column ( Integer , unique = True ) protocol = Column ( String ) settings = Column ( String ) stream_settings = Column ( String ) tag = Column ( String , unique = True ) sniffing = Column ( String )","title":"Inbounds"},{"location":"reference/database/schemas/","text":"XTLS_CRUD database schemas Inbounds","title":"schemas"},{"location":"reference/database/schemas/#xtls_crud.database.schemas--xtls_crud-database-schemas","text":"Inbounds","title":"XTLS_CRUD database schemas"},{"location":"reference/database/schemas/inbounds/","text":"Inbounds Bases: InboundsInDBBase Inbounds schema Attributes: Name Type Description id int id user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description Inbounds Inbounds Inbounds schema Source code in xtls_crud/database/schemas/inbounds.py 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 class Inbounds ( InboundsInDBBase ): \"\"\" Inbounds schema Attributes: id (int): id user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: Inbounds (Inbounds): Inbounds schema \"\"\" InboundsBase Bases: BaseModel Inbounds base schema Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsBase InboundsBase Inbounds base schema Examples: inbounds.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from xtls_crud.database.schemas.inbounds import InboundsBase inbounds = InboundsBase ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = \"remark\" , enable = True , expiry_time = 0 , listen = \"\" port = 0 , protocol = \"\" , settings = \"\" , stream_settings = \"\" , tag = \"\" , sniffing = \"\" , ) print ( inbounds ) Result InboundsBase ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = 'remark' , enable = True, expiry_time = 0 , listen = '' , port = 0 , protocol = '' , settings = '' , stream_settings = '' , tag = '' , sniffing = '' ) # noqa: E501 Source code in xtls_crud/database/schemas/inbounds.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class InboundsBase ( BaseModel ): \"\"\" Inbounds base schema Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsBase (InboundsBase): Inbounds base schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsBase inbounds = InboundsBase( user_id=1, up=0, down=0, total=0, remark=\"remark\", enable=True, expiry_time=0, listen=\"\" port=0, protocol=\"\", settings=\"\", stream_settings=\"\", tag=\"\", sniffing=\"\", ) print(inbounds) ``` ```shell title=\"Result\" InboundsBase(user_id=1, up=0, down=0, total=0, remark='remark', enable=True, expiry_time=0, listen='', port=0, protocol='', settings='', stream_settings='', tag='', sniffing='') # noqa: E501 ``` \"\"\" user_id : int up : int down : int total : int remark : str enable : bool expiry_time : int listen : str port : int protocol : str settings : str stream_settings : str tag : str sniffing : str InboundsCreate Bases: InboundsBase Inbounds create schema Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsCreate InboundsCreate Inbounds create schema Examples: inbounds.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from xtls_crud.database.schemas.inbounds import InboundsCreate inbounds = InboundsCreate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = \"remark\" , enable = True , expiry_time = 0 , listen = \"\" port = 0 , protocol = \"\" , settings = \"\" , stream_settings = \"\" , tag = \"\" , sniffing = \"\" , ) print ( inbounds ) Result InboundsCreate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = 'remark' , enable = True, expiry_time = 0 , listen = '' , port = 0 , protocol = '' , settings = '' , stream_settings = '' , tag = '' , sniffing = '' ) # noqa: E501 Source code in xtls_crud/database/schemas/inbounds.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 class InboundsCreate ( InboundsBase ): \"\"\" Inbounds create schema Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsCreate (InboundsCreate): Inbounds create schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsCreate inbounds = InboundsCreate( user_id=1, up=0, down=0, total=0, remark=\"remark\", enable=True, expiry_time=0, listen=\"\" port=0, protocol=\"\", settings=\"\", stream_settings=\"\", tag=\"\", sniffing=\"\", ) print(inbounds) ``` ```shell title=\"Result\" InboundsCreate(user_id=1, up=0, down=0, total=0, remark='remark', enable=True, expiry_time=0, listen='', port=0, protocol='', settings='', stream_settings='', tag='', sniffing='') # noqa: E501 ``` \"\"\" InboundsInDB Bases: InboundsInDBBase Inbounds in database schema Attributes: Name Type Description id int id user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description Inbounds Inbounds Inbounds in database schema Source code in xtls_crud/database/schemas/inbounds.py 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 class InboundsInDB ( InboundsInDBBase ): \"\"\" Inbounds in database schema Attributes: id (int): id user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: Inbounds (Inbounds): Inbounds in database schema \"\"\" InboundsInDBBase Bases: InboundsBase Inbounds in database base schema Attributes: Name Type Description id int id user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsInDBBase InboundsInDBBase Inbounds in database base schema Source code in xtls_crud/database/schemas/inbounds.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 class InboundsInDBBase ( InboundsBase ): \"\"\" Inbounds in database base schema Attributes: id (int): id user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsInDBBase (InboundsInDBBase): Inbounds in database base schema \"\"\" id : Optional [ int ] = None class Config : orm_mode = True InboundsOrderGetFilter Bases: BaseModel Inbounds get filter schema Other Parameters: Name Type Description user_id Optional [ int ] user id enable Optional [ bool ] enable port Optional [ int ] port protocol Optional [ str ] protocol tag Optional [ str ] tag Returns: Name Type Description InboundsOrderGetFilter InboundsOrderGetFilter Inbounds get filter schema Examples: inbounds.py 1 2 3 4 5 6 7 8 from xtls_crud.database.schemas.inbounds import InboundsOrderGetFilter inbounds = InboundsOrderGetFilter ( user_id = 1 , enable = True , ) print ( inbounds ) Result InboundsOrderGetFilter ( user_id = 1 , enable = True, port = None, protocol = None, tag = None ) Source code in xtls_crud/database/schemas/inbounds.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 class InboundsOrderGetFilter ( BaseModel ): \"\"\" Inbounds get filter schema Keyword Args: user_id (Optional[int]): user id enable (Optional[bool]): enable port (Optional[int]): port protocol (Optional[str]): protocol tag (Optional[str]): tag Returns: InboundsOrderGetFilter (InboundsOrderGetFilter): Inbounds get filter schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsOrderGetFilter inbounds = InboundsOrderGetFilter( user_id=1, enable=True, ) print(inbounds) ``` ```shell title=\"Result\" InboundsOrderGetFilter(user_id=1, enable=True, port=None, protocol=None, tag=None) ``` \"\"\" user_id : Optional [ int ] = None enable : Optional [ bool ] = None port : Optional [ int ] = None protocol : Optional [ str ] = None tag : Optional [ str ] = None InboundsUpdate Bases: InboundsBase Inbounds update schema Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsUpdate InboundsUpdate Inbounds update schema Examples: inbounds.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from xtls_crud.database.schemas.inbounds import InboundsUpdate inbounds = InboundsUpdate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = \"remark\" , enable = True , expiry_time = 0 , listen = \"\" port = 0 , protocol = \"\" , settings = \"\" , stream_settings = \"\" , tag = \"\" , sniffing = \"\" , ) print ( inbounds ) Result InboundsUpdate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = 'remark' , enable = True, expiry_time = 0 , listen = '' , port = 0 , protocol = '' , settings = '' , stream_settings = '' , tag = '' , sniffing = '' ) # noqa: E501 Source code in xtls_crud/database/schemas/inbounds.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 class InboundsUpdate ( InboundsBase ): \"\"\" Inbounds update schema Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsUpdate (InboundsUpdate): Inbounds update schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsUpdate inbounds = InboundsUpdate( user_id=1, up=0, down=0, total=0, remark=\"remark\", enable=True, expiry_time=0, listen=\"\" port=0, protocol=\"\", settings=\"\", stream_settings=\"\", tag=\"\", sniffing=\"\", ) print(inbounds) ``` ```shell title=\"Result\" InboundsUpdate(user_id=1, up=0, down=0, total=0, remark='remark', enable=True, expiry_time=0, listen='', port=0, protocol='', settings='', stream_settings='', tag='', sniffing='') # noqa: E501 ``` \"\"\"","title":"inbounds"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.Inbounds","text":"Bases: InboundsInDBBase Inbounds schema Attributes: Name Type Description id int id user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description Inbounds Inbounds Inbounds schema Source code in xtls_crud/database/schemas/inbounds.py 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 class Inbounds ( InboundsInDBBase ): \"\"\" Inbounds schema Attributes: id (int): id user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: Inbounds (Inbounds): Inbounds schema \"\"\"","title":"Inbounds"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.InboundsBase","text":"Bases: BaseModel Inbounds base schema Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsBase InboundsBase Inbounds base schema Examples: inbounds.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from xtls_crud.database.schemas.inbounds import InboundsBase inbounds = InboundsBase ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = \"remark\" , enable = True , expiry_time = 0 , listen = \"\" port = 0 , protocol = \"\" , settings = \"\" , stream_settings = \"\" , tag = \"\" , sniffing = \"\" , ) print ( inbounds ) Result InboundsBase ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = 'remark' , enable = True, expiry_time = 0 , listen = '' , port = 0 , protocol = '' , settings = '' , stream_settings = '' , tag = '' , sniffing = '' ) # noqa: E501 Source code in xtls_crud/database/schemas/inbounds.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class InboundsBase ( BaseModel ): \"\"\" Inbounds base schema Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsBase (InboundsBase): Inbounds base schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsBase inbounds = InboundsBase( user_id=1, up=0, down=0, total=0, remark=\"remark\", enable=True, expiry_time=0, listen=\"\" port=0, protocol=\"\", settings=\"\", stream_settings=\"\", tag=\"\", sniffing=\"\", ) print(inbounds) ``` ```shell title=\"Result\" InboundsBase(user_id=1, up=0, down=0, total=0, remark='remark', enable=True, expiry_time=0, listen='', port=0, protocol='', settings='', stream_settings='', tag='', sniffing='') # noqa: E501 ``` \"\"\" user_id : int up : int down : int total : int remark : str enable : bool expiry_time : int listen : str port : int protocol : str settings : str stream_settings : str tag : str sniffing : str","title":"InboundsBase"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.InboundsCreate","text":"Bases: InboundsBase Inbounds create schema Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsCreate InboundsCreate Inbounds create schema Examples: inbounds.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from xtls_crud.database.schemas.inbounds import InboundsCreate inbounds = InboundsCreate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = \"remark\" , enable = True , expiry_time = 0 , listen = \"\" port = 0 , protocol = \"\" , settings = \"\" , stream_settings = \"\" , tag = \"\" , sniffing = \"\" , ) print ( inbounds ) Result InboundsCreate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = 'remark' , enable = True, expiry_time = 0 , listen = '' , port = 0 , protocol = '' , settings = '' , stream_settings = '' , tag = '' , sniffing = '' ) # noqa: E501 Source code in xtls_crud/database/schemas/inbounds.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 class InboundsCreate ( InboundsBase ): \"\"\" Inbounds create schema Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsCreate (InboundsCreate): Inbounds create schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsCreate inbounds = InboundsCreate( user_id=1, up=0, down=0, total=0, remark=\"remark\", enable=True, expiry_time=0, listen=\"\" port=0, protocol=\"\", settings=\"\", stream_settings=\"\", tag=\"\", sniffing=\"\", ) print(inbounds) ``` ```shell title=\"Result\" InboundsCreate(user_id=1, up=0, down=0, total=0, remark='remark', enable=True, expiry_time=0, listen='', port=0, protocol='', settings='', stream_settings='', tag='', sniffing='') # noqa: E501 ``` \"\"\"","title":"InboundsCreate"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.InboundsInDB","text":"Bases: InboundsInDBBase Inbounds in database schema Attributes: Name Type Description id int id user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description Inbounds Inbounds Inbounds in database schema Source code in xtls_crud/database/schemas/inbounds.py 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 class InboundsInDB ( InboundsInDBBase ): \"\"\" Inbounds in database schema Attributes: id (int): id user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: Inbounds (Inbounds): Inbounds in database schema \"\"\"","title":"InboundsInDB"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.InboundsInDBBase","text":"Bases: InboundsBase Inbounds in database base schema Attributes: Name Type Description id int id user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsInDBBase InboundsInDBBase Inbounds in database base schema Source code in xtls_crud/database/schemas/inbounds.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 class InboundsInDBBase ( InboundsBase ): \"\"\" Inbounds in database base schema Attributes: id (int): id user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsInDBBase (InboundsInDBBase): Inbounds in database base schema \"\"\" id : Optional [ int ] = None class Config : orm_mode = True","title":"InboundsInDBBase"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.InboundsOrderGetFilter","text":"Bases: BaseModel Inbounds get filter schema Other Parameters: Name Type Description user_id Optional [ int ] user id enable Optional [ bool ] enable port Optional [ int ] port protocol Optional [ str ] protocol tag Optional [ str ] tag Returns: Name Type Description InboundsOrderGetFilter InboundsOrderGetFilter Inbounds get filter schema Examples: inbounds.py 1 2 3 4 5 6 7 8 from xtls_crud.database.schemas.inbounds import InboundsOrderGetFilter inbounds = InboundsOrderGetFilter ( user_id = 1 , enable = True , ) print ( inbounds ) Result InboundsOrderGetFilter ( user_id = 1 , enable = True, port = None, protocol = None, tag = None ) Source code in xtls_crud/database/schemas/inbounds.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 class InboundsOrderGetFilter ( BaseModel ): \"\"\" Inbounds get filter schema Keyword Args: user_id (Optional[int]): user id enable (Optional[bool]): enable port (Optional[int]): port protocol (Optional[str]): protocol tag (Optional[str]): tag Returns: InboundsOrderGetFilter (InboundsOrderGetFilter): Inbounds get filter schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsOrderGetFilter inbounds = InboundsOrderGetFilter( user_id=1, enable=True, ) print(inbounds) ``` ```shell title=\"Result\" InboundsOrderGetFilter(user_id=1, enable=True, port=None, protocol=None, tag=None) ``` \"\"\" user_id : Optional [ int ] = None enable : Optional [ bool ] = None port : Optional [ int ] = None protocol : Optional [ str ] = None tag : Optional [ str ] = None","title":"InboundsOrderGetFilter"},{"location":"reference/database/schemas/inbounds/#xtls_crud.database.schemas.inbounds.InboundsUpdate","text":"Bases: InboundsBase Inbounds update schema Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing Returns: Name Type Description InboundsUpdate InboundsUpdate Inbounds update schema Examples: inbounds.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from xtls_crud.database.schemas.inbounds import InboundsUpdate inbounds = InboundsUpdate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = \"remark\" , enable = True , expiry_time = 0 , listen = \"\" port = 0 , protocol = \"\" , settings = \"\" , stream_settings = \"\" , tag = \"\" , sniffing = \"\" , ) print ( inbounds ) Result InboundsUpdate ( user_id = 1 , up = 0 , down = 0 , total = 0 , remark = 'remark' , enable = True, expiry_time = 0 , listen = '' , port = 0 , protocol = '' , settings = '' , stream_settings = '' , tag = '' , sniffing = '' ) # noqa: E501 Source code in xtls_crud/database/schemas/inbounds.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 class InboundsUpdate ( InboundsBase ): \"\"\" Inbounds update schema Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing Returns: InboundsUpdate (InboundsUpdate): Inbounds update schema Examples: ```py linenums=\"1\" title=\"inbounds.py\" from xtls_crud.database.schemas.inbounds import InboundsUpdate inbounds = InboundsUpdate( user_id=1, up=0, down=0, total=0, remark=\"remark\", enable=True, expiry_time=0, listen=\"\" port=0, protocol=\"\", settings=\"\", stream_settings=\"\", tag=\"\", sniffing=\"\", ) print(inbounds) ``` ```shell title=\"Result\" InboundsUpdate(user_id=1, up=0, down=0, total=0, remark='remark', enable=True, expiry_time=0, listen='', port=0, protocol='', settings='', stream_settings='', tag='', sniffing='') # noqa: E501 ``` \"\"\"","title":"InboundsUpdate"},{"location":"reference/models/","text":"XTLS_CRUD helper models Inbounds","title":"models"},{"location":"reference/models/#xtls_crud.models--xtls_crud-helper-models","text":"Inbounds","title":"XTLS_CRUD helper models"},{"location":"reference/models/inbounds/","text":"XTLS_CRUD inbounds schemas Easy Inbounds Builder Inbounds Settings Sniffing StreamSettings","title":"inbounds"},{"location":"reference/models/inbounds/#xtls_crud.models.inbounds--xtls_crud-inbounds-schemas","text":"Easy Inbounds Builder Inbounds Settings Sniffing StreamSettings","title":"XTLS_CRUD inbounds schemas"},{"location":"reference/models/inbounds/easy_inbounds_builder/","text":"Models for Inbounds Builder Make it easy to build inbounds EasyBuilderSchemaCreate Bases: BaseModel Easy builder schema create Other Parameters: Name Type Description user_id int User ID up int Upload (Byte) down int Download (Byte) total int Total remark str Remark enable bool Enable expiry_time int Expiry Time (MILLISECONDS) listen str Listen port int Port protocol str Protocol uuid str UUID network str Network security str Security server_name str Server Name ws_path str WebSocket Path tag int Tag sniffing bool Sniffing Returns: Name Type Description EasyBuilderSchemaCreate EasyBuilderSchemaCreate Easy builder schema create Source code in xtls_crud/models/inbounds/easy_inbounds_builder.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class EasyBuilderSchemaCreate ( BaseModel ): \"\"\" Easy builder schema create Keyword Args: user_id (int): User ID up (int): Upload (Byte) down (int): Download (Byte) total (int): Total remark (str): Remark enable (bool): Enable expiry_time (int): Expiry Time (MILLISECONDS) listen (str): Listen port (int): Port protocol (str): Protocol uuid (str): UUID network (str): Network security (str): Security server_name (str): Server Name ws_path (str): WebSocket Path tag (int): Tag sniffing (bool): Sniffing Returns: EasyBuilderSchemaCreate (EasyBuilderSchemaCreate): Easy builder schema create \"\"\" user_id : t . Optional [ int ] = 1 up : t . Optional [ _ByteSize ] = Field ( 100 * byte_size . GIGABYTE . bytes , title = \"Upload\" , gt = 0 , multiple_of = 1 , example = \"100GB\" , description = \"Upload (Byte) Default: 100GB\" ) down : t . Optional [ _ByteSize ] = Field ( 100 * byte_size . GIGABYTE . bytes , title = \"Download\" , gt = 0 , multiple_of = 1 , example = 100 * byte_size . GIGABYTE . bytes , description = \"Download (Byte) Default: 100GB\" ) total : t . Optional [ int ] = Field ( 0 , title = \"Total\" , example = 0 , description = \"Total\" , ge = 0 , multiple_of = 1 ) remark : t . Optional [ str ] = Field ( ... , title = \"Remark\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"amiwrpremium\" , description = \"Name of this setting\" ) enable : t . Optional [ bool ] = Field ( True , title = \"Enable\" , example = True , description = \"Enable this setting\" ) expiry_time : t . Optional [ _ExpiryTime ] = Field ( 1 * time_info . MONTH . seconds * 1000 , title = \"Expiry Time\" , gt = 0 , multiple_of = 1 , example = \"1MO\" , description = \"Expiry Time (MILLISECONDS) Default: Never\" ) listen : str = Field ( \"\" , title = \"Listen\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"\" , description = \"Listen\" ) port : int = Field ( ... , title = \"Port\" , gt = 0 , multiple_of = 1 , le = 65535 , example = 443 , description = \"Port to bind\" ) protocol : t . Optional [ ProtocolsType ] = Field ( \"vmess\" , title = \"Protocol\" , example = \"vmess\" , description = \"Protocol\" ) uuid : t . Optional [ t . Union [ UUID4 , UUID1 ]] = Field ( uuid4 (), title = \"UUID\" , example = uuid4 (), description = \"UUID\" ) network : t . Optional [ NetworksType ] = Field ( \"ws\" , title = \"Network\" , example = \"ws\" , description = \"Network\" ) security : t . Optional [ str ] = Field ( \"tls\" , title = \"Security\" , example = \"tls\" , description = \"Security\" ) server_name : HttpUrl = Field ( settings . SITE_URL , title = \"Server Name\" , strip_whitespace = True , example = settings . SITE_URL , description = \"Server Name\" ) ws_path : t . Optional [ str ] = Field ( _random_path ( 6 ), title = \"WS Path\" , max_length = 7 , min_length = 7 , strip_whitespace = True , example = _random_path ( 6 ), description = \"WebSocket Path\" ) tag : int = Field ( ... , title = \"Tag\" , gt = 0 , multiple_of = 1 , example = 1 , description = \"Tag\" ) sniffing : t . Optional [ bool ] = Field ( True , title = \"Sniffing\" , example = True , description = \"Sniffing\" ) EasyBuilderSchemaUpdate Bases: BaseModel Easy builder schema update Other Parameters: Name Type Description user_id int User ID (Default: None) up int Upload (Byte) (Default: None) down int Download (Byte) (Default: None) total int Total (Default: None) remark str Name of this setting (Default: None) enable bool Enable this setting (Default: None) expiry_time int Expiry Time (MILLISECONDS) (Default: None) listen str Listen (Default: None) port int Port to bind (Default: None) protocol str Protocol (Default: None) uuid str UUID (Default: None) network str Network (Default: None) security str Security (Default: None) server_name str Server Name (Default: None) ws_path str WebSocket Path (Default: None) tag int Tag (Default: None) sniffing bool Sniffing (Default: None) Returns: Name Type Description EasyBuilderSchemaUpdate EasyBuilderSchemaUpdate Easy builder schema update Source code in xtls_crud/models/inbounds/easy_inbounds_builder.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 class EasyBuilderSchemaUpdate ( BaseModel ): \"\"\" Easy builder schema update Keyword Args: user_id (int): User ID (Default: None) up (int): Upload (Byte) (Default: None) down (int): Download (Byte) (Default: None) total (int): Total (Default: None) remark (str): Name of this setting (Default: None) enable (bool): Enable this setting (Default: None) expiry_time (int): Expiry Time (MILLISECONDS) (Default: None) listen (str): Listen (Default: None) port (int): Port to bind (Default: None) protocol (str): Protocol (Default: None) uuid (str): UUID (Default: None) network (str): Network (Default: None) security (str): Security (Default: None) server_name (str): Server Name (Default: None) ws_path (str): WebSocket Path (Default: None) tag (int): Tag (Default: None) sniffing (bool): Sniffing (Default: None) Returns: EasyBuilderSchemaUpdate (EasyBuilderSchemaUpdate): Easy builder schema update \"\"\" user_id : t . Optional [ int ] = 1 up : t . Optional [ _ByteSize ] = Field ( None , title = \"Upload\" , gt = 0 , multiple_of = 1 , example = \"100GB\" , description = \"Upload (Byte) Default: 100GB\" ) down : t . Optional [ _ByteSize ] = Field ( None , title = \"Download\" , gt = 0 , multiple_of = 1 , example = 100 * byte_size . GIGABYTE . bytes , description = \"Download (Byte) Default: 100GB\" ) total : t . Optional [ int ] = Field ( None , title = \"Total\" , example = 0 , description = \"Total\" , ge = 0 , multiple_of = 1 ) remark : t . Optional [ str ] = Field ( None , title = \"Remark\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"amiwrpremium\" , description = \"Name of this setting\" ) enable : t . Optional [ bool ] = Field ( True , title = \"Enable\" , example = True , description = \"Enable this setting\" ) expiry_time : t . Optional [ _ExpiryTime ] = Field ( None , title = \"Expiry Time\" , gt = 0 , multiple_of = 1 , example = \"1MO\" , description = \"Expiry Time (MILLISECONDS) Default: Never\" ) listen : str = Field ( None , title = \"Listen\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"\" , description = \"Listen\" ) port : int = Field ( None , title = \"Port\" , gt = 0 , multiple_of = 1 , le = 65535 , example = 443 , description = \"Port to bind\" ) protocol : t . Optional [ ProtocolsType ] = Field ( None , title = \"Protocol\" , example = \"vmess\" , description = \"Protocol\" ) uuid : t . Optional [ t . Union [ UUID4 , UUID1 ]] = Field ( None , title = \"UUID\" , example = uuid4 (), description = \"UUID\" ) network : t . Optional [ NetworksType ] = Field ( None , title = \"Network\" , example = \"ws\" , description = \"Network\" ) security : t . Optional [ str ] = Field ( None , title = \"Security\" , example = \"tls\" , description = \"Security\" ) server_name : HttpUrl = Field ( None , title = \"Server Name\" , strip_whitespace = True , example = settings . SITE_URL , description = \"Server Name\" ) ws_path : t . Optional [ str ] = Field ( None , title = \"WS Path\" , max_length = 7 , min_length = 7 , strip_whitespace = True , example = _random_path ( 6 ), description = \"WebSocket Path\" ) tag : int = Field ( None , title = \"Tag\" , gt = 0 , multiple_of = 1 , example = 1 , description = \"Tag\" ) sniffing : t . Optional [ bool ] = Field ( None , title = \"Sniffing\" , example = True , description = \"Sniffing\" )","title":"easy_inbounds_builder"},{"location":"reference/models/inbounds/easy_inbounds_builder/#xtls_crud.models.inbounds.easy_inbounds_builder--models-for-inbounds-builder","text":"Make it easy to build inbounds","title":"Models for Inbounds Builder"},{"location":"reference/models/inbounds/easy_inbounds_builder/#xtls_crud.models.inbounds.easy_inbounds_builder.EasyBuilderSchemaCreate","text":"Bases: BaseModel Easy builder schema create Other Parameters: Name Type Description user_id int User ID up int Upload (Byte) down int Download (Byte) total int Total remark str Remark enable bool Enable expiry_time int Expiry Time (MILLISECONDS) listen str Listen port int Port protocol str Protocol uuid str UUID network str Network security str Security server_name str Server Name ws_path str WebSocket Path tag int Tag sniffing bool Sniffing Returns: Name Type Description EasyBuilderSchemaCreate EasyBuilderSchemaCreate Easy builder schema create Source code in xtls_crud/models/inbounds/easy_inbounds_builder.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class EasyBuilderSchemaCreate ( BaseModel ): \"\"\" Easy builder schema create Keyword Args: user_id (int): User ID up (int): Upload (Byte) down (int): Download (Byte) total (int): Total remark (str): Remark enable (bool): Enable expiry_time (int): Expiry Time (MILLISECONDS) listen (str): Listen port (int): Port protocol (str): Protocol uuid (str): UUID network (str): Network security (str): Security server_name (str): Server Name ws_path (str): WebSocket Path tag (int): Tag sniffing (bool): Sniffing Returns: EasyBuilderSchemaCreate (EasyBuilderSchemaCreate): Easy builder schema create \"\"\" user_id : t . Optional [ int ] = 1 up : t . Optional [ _ByteSize ] = Field ( 100 * byte_size . GIGABYTE . bytes , title = \"Upload\" , gt = 0 , multiple_of = 1 , example = \"100GB\" , description = \"Upload (Byte) Default: 100GB\" ) down : t . Optional [ _ByteSize ] = Field ( 100 * byte_size . GIGABYTE . bytes , title = \"Download\" , gt = 0 , multiple_of = 1 , example = 100 * byte_size . GIGABYTE . bytes , description = \"Download (Byte) Default: 100GB\" ) total : t . Optional [ int ] = Field ( 0 , title = \"Total\" , example = 0 , description = \"Total\" , ge = 0 , multiple_of = 1 ) remark : t . Optional [ str ] = Field ( ... , title = \"Remark\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"amiwrpremium\" , description = \"Name of this setting\" ) enable : t . Optional [ bool ] = Field ( True , title = \"Enable\" , example = True , description = \"Enable this setting\" ) expiry_time : t . Optional [ _ExpiryTime ] = Field ( 1 * time_info . MONTH . seconds * 1000 , title = \"Expiry Time\" , gt = 0 , multiple_of = 1 , example = \"1MO\" , description = \"Expiry Time (MILLISECONDS) Default: Never\" ) listen : str = Field ( \"\" , title = \"Listen\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"\" , description = \"Listen\" ) port : int = Field ( ... , title = \"Port\" , gt = 0 , multiple_of = 1 , le = 65535 , example = 443 , description = \"Port to bind\" ) protocol : t . Optional [ ProtocolsType ] = Field ( \"vmess\" , title = \"Protocol\" , example = \"vmess\" , description = \"Protocol\" ) uuid : t . Optional [ t . Union [ UUID4 , UUID1 ]] = Field ( uuid4 (), title = \"UUID\" , example = uuid4 (), description = \"UUID\" ) network : t . Optional [ NetworksType ] = Field ( \"ws\" , title = \"Network\" , example = \"ws\" , description = \"Network\" ) security : t . Optional [ str ] = Field ( \"tls\" , title = \"Security\" , example = \"tls\" , description = \"Security\" ) server_name : HttpUrl = Field ( settings . SITE_URL , title = \"Server Name\" , strip_whitespace = True , example = settings . SITE_URL , description = \"Server Name\" ) ws_path : t . Optional [ str ] = Field ( _random_path ( 6 ), title = \"WS Path\" , max_length = 7 , min_length = 7 , strip_whitespace = True , example = _random_path ( 6 ), description = \"WebSocket Path\" ) tag : int = Field ( ... , title = \"Tag\" , gt = 0 , multiple_of = 1 , example = 1 , description = \"Tag\" ) sniffing : t . Optional [ bool ] = Field ( True , title = \"Sniffing\" , example = True , description = \"Sniffing\" )","title":"EasyBuilderSchemaCreate"},{"location":"reference/models/inbounds/easy_inbounds_builder/#xtls_crud.models.inbounds.easy_inbounds_builder.EasyBuilderSchemaUpdate","text":"Bases: BaseModel Easy builder schema update Other Parameters: Name Type Description user_id int User ID (Default: None) up int Upload (Byte) (Default: None) down int Download (Byte) (Default: None) total int Total (Default: None) remark str Name of this setting (Default: None) enable bool Enable this setting (Default: None) expiry_time int Expiry Time (MILLISECONDS) (Default: None) listen str Listen (Default: None) port int Port to bind (Default: None) protocol str Protocol (Default: None) uuid str UUID (Default: None) network str Network (Default: None) security str Security (Default: None) server_name str Server Name (Default: None) ws_path str WebSocket Path (Default: None) tag int Tag (Default: None) sniffing bool Sniffing (Default: None) Returns: Name Type Description EasyBuilderSchemaUpdate EasyBuilderSchemaUpdate Easy builder schema update Source code in xtls_crud/models/inbounds/easy_inbounds_builder.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 class EasyBuilderSchemaUpdate ( BaseModel ): \"\"\" Easy builder schema update Keyword Args: user_id (int): User ID (Default: None) up (int): Upload (Byte) (Default: None) down (int): Download (Byte) (Default: None) total (int): Total (Default: None) remark (str): Name of this setting (Default: None) enable (bool): Enable this setting (Default: None) expiry_time (int): Expiry Time (MILLISECONDS) (Default: None) listen (str): Listen (Default: None) port (int): Port to bind (Default: None) protocol (str): Protocol (Default: None) uuid (str): UUID (Default: None) network (str): Network (Default: None) security (str): Security (Default: None) server_name (str): Server Name (Default: None) ws_path (str): WebSocket Path (Default: None) tag (int): Tag (Default: None) sniffing (bool): Sniffing (Default: None) Returns: EasyBuilderSchemaUpdate (EasyBuilderSchemaUpdate): Easy builder schema update \"\"\" user_id : t . Optional [ int ] = 1 up : t . Optional [ _ByteSize ] = Field ( None , title = \"Upload\" , gt = 0 , multiple_of = 1 , example = \"100GB\" , description = \"Upload (Byte) Default: 100GB\" ) down : t . Optional [ _ByteSize ] = Field ( None , title = \"Download\" , gt = 0 , multiple_of = 1 , example = 100 * byte_size . GIGABYTE . bytes , description = \"Download (Byte) Default: 100GB\" ) total : t . Optional [ int ] = Field ( None , title = \"Total\" , example = 0 , description = \"Total\" , ge = 0 , multiple_of = 1 ) remark : t . Optional [ str ] = Field ( None , title = \"Remark\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"amiwrpremium\" , description = \"Name of this setting\" ) enable : t . Optional [ bool ] = Field ( True , title = \"Enable\" , example = True , description = \"Enable this setting\" ) expiry_time : t . Optional [ _ExpiryTime ] = Field ( None , title = \"Expiry Time\" , gt = 0 , multiple_of = 1 , example = \"1MO\" , description = \"Expiry Time (MILLISECONDS) Default: Never\" ) listen : str = Field ( None , title = \"Listen\" , max_length = 255 , min_length = 1 , strip_whitespace = True , regex = r '^[\\w\\-\\s]+$' , example = \"\" , description = \"Listen\" ) port : int = Field ( None , title = \"Port\" , gt = 0 , multiple_of = 1 , le = 65535 , example = 443 , description = \"Port to bind\" ) protocol : t . Optional [ ProtocolsType ] = Field ( None , title = \"Protocol\" , example = \"vmess\" , description = \"Protocol\" ) uuid : t . Optional [ t . Union [ UUID4 , UUID1 ]] = Field ( None , title = \"UUID\" , example = uuid4 (), description = \"UUID\" ) network : t . Optional [ NetworksType ] = Field ( None , title = \"Network\" , example = \"ws\" , description = \"Network\" ) security : t . Optional [ str ] = Field ( None , title = \"Security\" , example = \"tls\" , description = \"Security\" ) server_name : HttpUrl = Field ( None , title = \"Server Name\" , strip_whitespace = True , example = settings . SITE_URL , description = \"Server Name\" ) ws_path : t . Optional [ str ] = Field ( None , title = \"WS Path\" , max_length = 7 , min_length = 7 , strip_whitespace = True , example = _random_path ( 6 ), description = \"WebSocket Path\" ) tag : int = Field ( None , title = \"Tag\" , gt = 0 , multiple_of = 1 , example = 1 , description = \"Tag\" ) sniffing : t . Optional [ bool ] = Field ( None , title = \"Sniffing\" , example = True , description = \"Sniffing\" )","title":"EasyBuilderSchemaUpdate"},{"location":"reference/models/inbounds/inbounds/","text":"PrettyInbound Bases: BaseModel Pretty inbound schema (use to get pretty json response when retrieving from API) Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing id int id Returns: Name Type Description PrettyInbound PrettyInbound Pretty inbound schema Source code in xtls_crud/models/inbounds/inbounds.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class PrettyInbound ( BaseModel ): \"\"\" Pretty inbound schema (use to get pretty json response when retrieving from API) Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing id (int): id Returns: PrettyInbound (PrettyInbound): Pretty inbound schema \"\"\" user_id : int up : int down : int total : int remark : str enable : bool expiry_time : datetime listen : str port : int protocol : str settings : Setting stream_settings : StreamSettings tag : str sniffing : Sniffing id : int class Config : orm_mode = True @validator ( 'settings' , pre = True ) def validate_settings ( cls , v ): if isinstance ( v , str ): v = json . loads ( v ) return Setting ( ** v ) @validator ( 'stream_settings' , pre = True ) def validate_stream_settings ( cls , v ): if isinstance ( v , str ): v = json . loads ( v ) return StreamSettings ( ** v ) @validator ( 'sniffing' , pre = True ) def validate_sniffing ( cls , v ): if isinstance ( v , str ): v = json . loads ( v ) return Sniffing ( ** v )","title":"inbounds"},{"location":"reference/models/inbounds/inbounds/#xtls_crud.models.inbounds.inbounds.PrettyInbound","text":"Bases: BaseModel Pretty inbound schema (use to get pretty json response when retrieving from API) Other Parameters: Name Type Description user_id int user id up int up down int down total int total remark str remark enable bool enable expiry_time int expiry time listen str listen port int port protocol str protocol settings str settings stream_settings str stream settings tag str tag sniffing str sniffing id int id Returns: Name Type Description PrettyInbound PrettyInbound Pretty inbound schema Source code in xtls_crud/models/inbounds/inbounds.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class PrettyInbound ( BaseModel ): \"\"\" Pretty inbound schema (use to get pretty json response when retrieving from API) Keyword Args: user_id (int): user id up (int): up down (int): down total (int): total remark (str): remark enable (bool): enable expiry_time (int): expiry time listen (str): listen port (int): port protocol (str): protocol settings (str): settings stream_settings (str): stream settings tag (str): tag sniffing (str): sniffing id (int): id Returns: PrettyInbound (PrettyInbound): Pretty inbound schema \"\"\" user_id : int up : int down : int total : int remark : str enable : bool expiry_time : datetime listen : str port : int protocol : str settings : Setting stream_settings : StreamSettings tag : str sniffing : Sniffing id : int class Config : orm_mode = True @validator ( 'settings' , pre = True ) def validate_settings ( cls , v ): if isinstance ( v , str ): v = json . loads ( v ) return Setting ( ** v ) @validator ( 'stream_settings' , pre = True ) def validate_stream_settings ( cls , v ): if isinstance ( v , str ): v = json . loads ( v ) return StreamSettings ( ** v ) @validator ( 'sniffing' , pre = True ) def validate_sniffing ( cls , v ): if isinstance ( v , str ): v = json . loads ( v ) return Sniffing ( ** v )","title":"PrettyInbound"},{"location":"reference/models/inbounds/settings/","text":"Client Bases: BaseModel Client Other Parameters: Name Type Description id Optional [ Union [ UUID4 , UUID1 ]] id (default: uuid4()) alterId Optional [ int ] alterId (default: 0) Returns: Name Type Description Client Client Client Source code in xtls_crud/models/inbounds/settings.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Client ( BaseModel ): \"\"\" Client Keyword Args: id (Optional[Union[UUID4, UUID1]]): id (default: uuid4()) alterId (Optional[int]): alterId (default: 0) Returns: Client (Client): Client \"\"\" id : Optional [ Union [ UUID4 , UUID1 ]] = uuid4 () alterId : Optional [ int ] = 0 PrettyClient Bases: Client Pretty Client Other Parameters: Name Type Description id str id alterId int alterId Returns: Name Type Description PrettyClient PrettyClient Pretty Client Source code in xtls_crud/models/inbounds/settings.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class PrettyClient ( Client ): \"\"\" Pretty Client Keyword Args: id (str): id alterId (int): alterId Returns: PrettyClient (PrettyClient): Pretty Client \"\"\" id : str alterId : int PrettySetting Bases: Setting Pretty Setting Other Parameters: Name Type Description clients List [ PrettyClient ] clients disableInsecureEncryption bool disableInsecureEncryption Returns: Name Type Description PrettySetting PrettySetting Pretty Setting Source code in xtls_crud/models/inbounds/settings.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class PrettySetting ( Setting ): \"\"\" Pretty Setting Keyword Args: clients (List[PrettyClient]): clients disableInsecureEncryption (bool): disableInsecureEncryption Returns: PrettySetting (PrettySetting): Pretty Setting \"\"\" clients : List [ PrettyClient ] disableInsecureEncryption : bool Setting Bases: BaseModel Setting Other Parameters: Name Type Description clients List [ Client ] clients disableInsecureEncryption Optional [ bool ] disableInsecureEncryption (default: False) Returns: Name Type Description Setting Setting Setting Source code in xtls_crud/models/inbounds/settings.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Setting ( BaseModel ): \"\"\" Setting Keyword Args: clients (List[Client]): clients disableInsecureEncryption (Optional[bool]): disableInsecureEncryption (default: False) Returns: Setting (Setting): Setting \"\"\" clients : List [ Client ] disableInsecureEncryption : Optional [ bool ] = False","title":"settings"},{"location":"reference/models/inbounds/settings/#xtls_crud.models.inbounds.settings.Client","text":"Bases: BaseModel Client Other Parameters: Name Type Description id Optional [ Union [ UUID4 , UUID1 ]] id (default: uuid4()) alterId Optional [ int ] alterId (default: 0) Returns: Name Type Description Client Client Client Source code in xtls_crud/models/inbounds/settings.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Client ( BaseModel ): \"\"\" Client Keyword Args: id (Optional[Union[UUID4, UUID1]]): id (default: uuid4()) alterId (Optional[int]): alterId (default: 0) Returns: Client (Client): Client \"\"\" id : Optional [ Union [ UUID4 , UUID1 ]] = uuid4 () alterId : Optional [ int ] = 0","title":"Client"},{"location":"reference/models/inbounds/settings/#xtls_crud.models.inbounds.settings.PrettyClient","text":"Bases: Client Pretty Client Other Parameters: Name Type Description id str id alterId int alterId Returns: Name Type Description PrettyClient PrettyClient Pretty Client Source code in xtls_crud/models/inbounds/settings.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class PrettyClient ( Client ): \"\"\" Pretty Client Keyword Args: id (str): id alterId (int): alterId Returns: PrettyClient (PrettyClient): Pretty Client \"\"\" id : str alterId : int","title":"PrettyClient"},{"location":"reference/models/inbounds/settings/#xtls_crud.models.inbounds.settings.PrettySetting","text":"Bases: Setting Pretty Setting Other Parameters: Name Type Description clients List [ PrettyClient ] clients disableInsecureEncryption bool disableInsecureEncryption Returns: Name Type Description PrettySetting PrettySetting Pretty Setting Source code in xtls_crud/models/inbounds/settings.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class PrettySetting ( Setting ): \"\"\" Pretty Setting Keyword Args: clients (List[PrettyClient]): clients disableInsecureEncryption (bool): disableInsecureEncryption Returns: PrettySetting (PrettySetting): Pretty Setting \"\"\" clients : List [ PrettyClient ] disableInsecureEncryption : bool","title":"PrettySetting"},{"location":"reference/models/inbounds/settings/#xtls_crud.models.inbounds.settings.Setting","text":"Bases: BaseModel Setting Other Parameters: Name Type Description clients List [ Client ] clients disableInsecureEncryption Optional [ bool ] disableInsecureEncryption (default: False) Returns: Name Type Description Setting Setting Setting Source code in xtls_crud/models/inbounds/settings.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Setting ( BaseModel ): \"\"\" Setting Keyword Args: clients (List[Client]): clients disableInsecureEncryption (Optional[bool]): disableInsecureEncryption (default: False) Returns: Setting (Setting): Setting \"\"\" clients : List [ Client ] disableInsecureEncryption : Optional [ bool ] = False","title":"Setting"},{"location":"reference/models/inbounds/sniffing/","text":"Sniffing Bases: BaseModel Sniffing Other Parameters: Name Type Description enabled Optional [ bool ] enabled (default: True) destOverride Optional [ List [ str ]] destOverride (default: ['http', 'tls']) Returns: Name Type Description Sniffing Sniffing Sniffing Source code in xtls_crud/models/inbounds/sniffing.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Sniffing ( BaseModel ): \"\"\" Sniffing Keyword Args: enabled (Optional[bool]): enabled (default: True) destOverride (Optional[List[str]]): destOverride (default: ['http', 'tls']) Returns: Sniffing (Sniffing): Sniffing \"\"\" enabled : Optional [ bool ] = True destOverride : Optional [ List [ str ]] = [ \"http\" , \"tls\" ]","title":"sniffing"},{"location":"reference/models/inbounds/sniffing/#xtls_crud.models.inbounds.sniffing.Sniffing","text":"Bases: BaseModel Sniffing Other Parameters: Name Type Description enabled Optional [ bool ] enabled (default: True) destOverride Optional [ List [ str ]] destOverride (default: ['http', 'tls']) Returns: Name Type Description Sniffing Sniffing Sniffing Source code in xtls_crud/models/inbounds/sniffing.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Sniffing ( BaseModel ): \"\"\" Sniffing Keyword Args: enabled (Optional[bool]): enabled (default: True) destOverride (Optional[List[str]]): destOverride (default: ['http', 'tls']) Returns: Sniffing (Sniffing): Sniffing \"\"\" enabled : Optional [ bool ] = True destOverride : Optional [ List [ str ]] = [ \"http\" , \"tls\" ]","title":"Sniffing"},{"location":"reference/models/inbounds/stream_settings/","text":"Certificate Bases: BaseModel Certificate Other Parameters: Name Type Description certificateFile Optional [ FilePath ] certificateFile (default: /root/cert.crt) keyFile Optional [ FilePath ] keyFile (default: /root/private.key) Returns: Name Type Description Certificate Certificate Certificate Source code in xtls_crud/models/inbounds/stream_settings.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Certificate ( BaseModel ): \"\"\" Certificate Keyword Args: certificateFile (Optional[FilePath]): certificateFile (default: /root/cert.crt) keyFile (Optional[FilePath]): keyFile (default: /root/private.key) Returns: Certificate (Certificate): Certificate \"\"\" certificateFile : Optional [ FilePath ] = \"/root/cert.crt\" keyFile : Optional [ FilePath ] = \"/root/private.key\" PrettyCertificate Bases: BaseModel Pretty Certificate (Used for API) Other Parameters: Name Type Description certificateFile str certificateFile keyFile str keyFile Returns: Name Type Description PrettyCertificate PrettyCertificate Pretty Certificate Source code in xtls_crud/models/inbounds/stream_settings.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class PrettyCertificate ( BaseModel ): \"\"\" Pretty Certificate (Used for API) Keyword Args: certificateFile (str): certificateFile keyFile (str): keyFile Returns: PrettyCertificate (PrettyCertificate): Pretty Certificate \"\"\" certificateFile : str keyFile : str PrettyStreamSettings Bases: BaseModel Pretty StreamSettings (Used for API) Other Parameters: Name Type Description network str network security str security tlsSettings PrettyTlsSettings tlsSettings wsSettings WsSettings wsSettings Returns: Name Type Description PrettyStreamSettings PrettyStreamSettings Pretty StreamSettings Source code in xtls_crud/models/inbounds/stream_settings.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 class PrettyStreamSettings ( BaseModel ): \"\"\" Pretty StreamSettings (Used for API) Keyword Args: network (str): network security (str): security tlsSettings (PrettyTlsSettings): tlsSettings wsSettings (WsSettings): wsSettings Returns: PrettyStreamSettings (PrettyStreamSettings): Pretty StreamSettings \"\"\" network : str security : str tlsSettings : PrettyTlsSettings wsSettings : WsSettings PrettyTlsSettings Bases: BaseModel Pretty TlsSettings (Used for API) Other Parameters: Name Type Description serverName str serverName certificates Optional [ List [ PrettyCertificate ]] certificates (default: [PrettyCertificate()]) Returns: Name Type Description PrettyTlsSettings PrettyTlsSettings Pretty TlsSettings Source code in xtls_crud/models/inbounds/stream_settings.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class PrettyTlsSettings ( BaseModel ): \"\"\" Pretty TlsSettings (Used for API) Keyword Args: serverName (str): serverName certificates (Optional[List[PrettyCertificate]]): certificates (default: [PrettyCertificate()]) Returns: PrettyTlsSettings (PrettyTlsSettings): Pretty TlsSettings \"\"\" serverName : str certificates : List [ PrettyCertificate ] StreamSettings Bases: BaseModel StreamSettings Other Parameters: Name Type Description network str network security str security tlsSettings TlsSettings tlsSettings wsSettings WsSettings wsSettings Returns: Name Type Description StreamSettings StreamSettings StreamSettings Source code in xtls_crud/models/inbounds/stream_settings.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 class StreamSettings ( BaseModel ): \"\"\" StreamSettings Keyword Args: network (str): network security (str): security tlsSettings (TlsSettings): tlsSettings wsSettings (WsSettings): wsSettings Returns: StreamSettings (StreamSettings): StreamSettings \"\"\" network : str security : str tlsSettings : TlsSettings wsSettings : WsSettings TlsSettings Bases: BaseModel TlsSettings Other Parameters: Name Type Description serverName str serverName certificates Optional [ List [ Certificate ]] certificates (default: [Certificate()]) Returns: Name Type Description TlsSettings TlsSettings TlsSettings Source code in xtls_crud/models/inbounds/stream_settings.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class TlsSettings ( BaseModel ): \"\"\" TlsSettings Keyword Args: serverName (str): serverName certificates (Optional[List[Certificate]]): certificates (default: [Certificate()]) Returns: TlsSettings (TlsSettings): TlsSettings \"\"\" serverName : str certificates : Optional [ List [ Certificate ]] = [ Certificate ()] WsSettings Bases: BaseModel WsSettings Other Parameters: Name Type Description path str path headers Optional [ Dict [ str , str ]] headers (default: {}) Returns: Name Type Description WsSettings WsSettings WsSettings Source code in xtls_crud/models/inbounds/stream_settings.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class WsSettings ( BaseModel ): \"\"\" WsSettings Keyword Args: path (str): path headers (Optional[Dict[str, str]]): headers (default: {}) Returns: WsSettings (WsSettings): WsSettings \"\"\" path : str headers : Optional [ Dict [ str , str ]] = {} @validator ( 'path' ) def path_must_start_with_slash ( cls , v ): if not v . startswith ( '/' ): raise ValueError ( 'path must start with /' ) return v","title":"stream_settings"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.Certificate","text":"Bases: BaseModel Certificate Other Parameters: Name Type Description certificateFile Optional [ FilePath ] certificateFile (default: /root/cert.crt) keyFile Optional [ FilePath ] keyFile (default: /root/private.key) Returns: Name Type Description Certificate Certificate Certificate Source code in xtls_crud/models/inbounds/stream_settings.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Certificate ( BaseModel ): \"\"\" Certificate Keyword Args: certificateFile (Optional[FilePath]): certificateFile (default: /root/cert.crt) keyFile (Optional[FilePath]): keyFile (default: /root/private.key) Returns: Certificate (Certificate): Certificate \"\"\" certificateFile : Optional [ FilePath ] = \"/root/cert.crt\" keyFile : Optional [ FilePath ] = \"/root/private.key\"","title":"Certificate"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.PrettyCertificate","text":"Bases: BaseModel Pretty Certificate (Used for API) Other Parameters: Name Type Description certificateFile str certificateFile keyFile str keyFile Returns: Name Type Description PrettyCertificate PrettyCertificate Pretty Certificate Source code in xtls_crud/models/inbounds/stream_settings.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class PrettyCertificate ( BaseModel ): \"\"\" Pretty Certificate (Used for API) Keyword Args: certificateFile (str): certificateFile keyFile (str): keyFile Returns: PrettyCertificate (PrettyCertificate): Pretty Certificate \"\"\" certificateFile : str keyFile : str","title":"PrettyCertificate"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.PrettyStreamSettings","text":"Bases: BaseModel Pretty StreamSettings (Used for API) Other Parameters: Name Type Description network str network security str security tlsSettings PrettyTlsSettings tlsSettings wsSettings WsSettings wsSettings Returns: Name Type Description PrettyStreamSettings PrettyStreamSettings Pretty StreamSettings Source code in xtls_crud/models/inbounds/stream_settings.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 class PrettyStreamSettings ( BaseModel ): \"\"\" Pretty StreamSettings (Used for API) Keyword Args: network (str): network security (str): security tlsSettings (PrettyTlsSettings): tlsSettings wsSettings (WsSettings): wsSettings Returns: PrettyStreamSettings (PrettyStreamSettings): Pretty StreamSettings \"\"\" network : str security : str tlsSettings : PrettyTlsSettings wsSettings : WsSettings","title":"PrettyStreamSettings"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.PrettyTlsSettings","text":"Bases: BaseModel Pretty TlsSettings (Used for API) Other Parameters: Name Type Description serverName str serverName certificates Optional [ List [ PrettyCertificate ]] certificates (default: [PrettyCertificate()]) Returns: Name Type Description PrettyTlsSettings PrettyTlsSettings Pretty TlsSettings Source code in xtls_crud/models/inbounds/stream_settings.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class PrettyTlsSettings ( BaseModel ): \"\"\" Pretty TlsSettings (Used for API) Keyword Args: serverName (str): serverName certificates (Optional[List[PrettyCertificate]]): certificates (default: [PrettyCertificate()]) Returns: PrettyTlsSettings (PrettyTlsSettings): Pretty TlsSettings \"\"\" serverName : str certificates : List [ PrettyCertificate ]","title":"PrettyTlsSettings"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.StreamSettings","text":"Bases: BaseModel StreamSettings Other Parameters: Name Type Description network str network security str security tlsSettings TlsSettings tlsSettings wsSettings WsSettings wsSettings Returns: Name Type Description StreamSettings StreamSettings StreamSettings Source code in xtls_crud/models/inbounds/stream_settings.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 class StreamSettings ( BaseModel ): \"\"\" StreamSettings Keyword Args: network (str): network security (str): security tlsSettings (TlsSettings): tlsSettings wsSettings (WsSettings): wsSettings Returns: StreamSettings (StreamSettings): StreamSettings \"\"\" network : str security : str tlsSettings : TlsSettings wsSettings : WsSettings","title":"StreamSettings"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.TlsSettings","text":"Bases: BaseModel TlsSettings Other Parameters: Name Type Description serverName str serverName certificates Optional [ List [ Certificate ]] certificates (default: [Certificate()]) Returns: Name Type Description TlsSettings TlsSettings TlsSettings Source code in xtls_crud/models/inbounds/stream_settings.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class TlsSettings ( BaseModel ): \"\"\" TlsSettings Keyword Args: serverName (str): serverName certificates (Optional[List[Certificate]]): certificates (default: [Certificate()]) Returns: TlsSettings (TlsSettings): TlsSettings \"\"\" serverName : str certificates : Optional [ List [ Certificate ]] = [ Certificate ()]","title":"TlsSettings"},{"location":"reference/models/inbounds/stream_settings/#xtls_crud.models.inbounds.stream_settings.WsSettings","text":"Bases: BaseModel WsSettings Other Parameters: Name Type Description path str path headers Optional [ Dict [ str , str ]] headers (default: {}) Returns: Name Type Description WsSettings WsSettings WsSettings Source code in xtls_crud/models/inbounds/stream_settings.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class WsSettings ( BaseModel ): \"\"\" WsSettings Keyword Args: path (str): path headers (Optional[Dict[str, str]]): headers (default: {}) Returns: WsSettings (WsSettings): WsSettings \"\"\" path : str headers : Optional [ Dict [ str , str ]] = {} @validator ( 'path' ) def path_must_start_with_slash ( cls , v ): if not v . startswith ( '/' ): raise ValueError ( 'path must start with /' ) return v","title":"WsSettings"},{"location":"reference/utils/","text":"XTLS_CRUD utils Builders","title":"utils"},{"location":"reference/utils/#xtls_crud.utils--xtls_crud-utils","text":"Builders","title":"XTLS_CRUD utils"},{"location":"reference/utils/builders/","text":"XTLS_CRUD builders utils Inbounds","title":"builders"},{"location":"reference/utils/builders/#xtls_crud.utils.builders--xtls_crud-builders-utils","text":"Inbounds","title":"XTLS_CRUD builders utils"},{"location":"reference/utils/builders/inbounds_builder/","text":"EasyInboundBuilder Bases: Builder Easy Inbound Builder for Inbounds Example from xtls_crud.utils.builders.inbounds_builder import EasyInboundBuilder inbound = EasyInboundBuilder () . with_user_id ( 1 ) . with_up ( \"1gb\" ) . with_down ( \"1gb\" ) . with_total ( 0 ) . with_remark ( \"TEST\" ) . with_enable ( True ) . with_expiry_time ( \"1D\" ) . with_listen ( \" \" ) . with_port ( 1234 ) . with_protocol ( \"vmess\" ) . with_uuid ( uuid4 ()) . with_network ( \"ws\" ) . with_security ( \"tls\" ) . with_server_name ( \"v2ray.my-site.com\" ) . with_ws_path ( \"/test\" ) . with_tag ( \"inbound-49428\" ) . with_sniffing ( True ) . build () print ( inbound ) Output InboundsBase ( user_id = 1 , up = '1gb' , down = '1gb' , total = 0 , remark = 'TEST' , enable = True, expiry_time = TimeInfo ( time = 1 , unit = 'D' ) , listen = ' ' , port = 1234 , protocol = 'vmess' , settings = '{\"clients\": [{\"id\": \"b1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1\"}]}' , stream_settings = '{\"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": {\"serverName\": \"v2ray.my-site.com\"}, \"wsSettings\": {\"path\": \"/test\"}}' , tag = 'inbound-49428' , sniffing = '{\"enabled\": true}' ) Source code in xtls_crud/utils/builders/inbounds_builder.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 class EasyInboundBuilder ( Builder ): \"\"\" Easy Inbound Builder for Inbounds ```python title=\"Example\" from xtls_crud.utils.builders.inbounds_builder import EasyInboundBuilder inbound = EasyInboundBuilder().with_user_id(1).with_up(\"1gb\").with_down(\"1gb\").with_total( 0).with_remark(\"TEST\").with_enable(True).with_expiry_time( \"1D\").with_listen(\" \").with_port(1234).with_protocol(\"vmess\").with_uuid(uuid4()).with_network( \"ws\").with_security(\"tls\").with_server_name(\"v2ray.my-site.com\").with_ws_path( \"/test\").with_tag(\"inbound-49428\").with_sniffing(True).build() print(inbound) ``` ```shell title=\"Output\" InboundsBase(user_id=1, up='1gb', down='1gb', total=0, remark='TEST', enable=True, expiry_time=TimeInfo(time=1, unit='D'), listen=' ', port=1234, protocol='vmess', settings='{\"clients\": [{\"id\": \"b1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1\"}]}', stream_settings='{\"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": {\"serverName\": \"v2ray.my-site.com\"}, \"wsSettings\": {\"path\": \"/test\"}}', tag='inbound-49428', sniffing='{\"enabled\": true}') ``` \"\"\" def __init__ ( self ): self . _user_id = None self . _up = None self . _down = None self . _total = None self . _remark = None self . _enable = None self . _expiry_time = None self . _listen = None self . _port = None self . _protocol = None self . _settings = None self . _network = None self . _security = None self . _server_name = None self . _ws_path = None self . _tag = None self . _sniffing = None def with_user_id ( self , user_id : int ): \"\"\" Add user id to inbound builder Args: user_id (int): User id Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _user_id = user_id return self def with_up ( self , up : _ByteSize ): \"\"\" Add up to inbound builder Args: up (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Up Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _up = byte_size . from_string ( up ) return self def with_down ( self , down : _ByteSize ): \"\"\" Add down to inbound builder Args: down (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Down Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _down = byte_size . from_string ( down ) return self def with_total ( self , total : int ): \"\"\" Add total to inbound builder Args: total (int): Total Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _total = total return self def with_remark ( self , remark : str ): \"\"\" Add remark to inbound builder Args: remark (str): Remark Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _remark = remark return self def with_enable ( self , enable : bool ): \"\"\" Add enable to inbound builder Args: enable (bool): Enable Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _enable = enable return self def with_expiry_time ( self , expiry_time : _ExpiryTime ): \"\"\" Add expiry time to inbound builder Args: expiry_time (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Expiry time Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _expiry_time = time_info . from_string ( expiry_time ) return self def with_listen ( self , listen : str ): \"\"\" Add listen to inbound builder Args: listen (str): Listen Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _listen = listen return self def with_port ( self , port : int ): \"\"\" Add port to inbound builder Args: port (int): Port Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _port = port return self def with_protocol ( self , protocol : t . Literal [ \"vmess\" , \"vless\" , \"trojan\" , \"socks\" , \"http\" , \"shadowsocks\" , \"dokodemo-door\" ] ): \"\"\" Add protocol to inbound builder Args: protocol (Literal[\"vmess\", \"vless\", \"trojan\", \"socks\", \"http\", \"shadowsocks\", \"dokodemo-door\"]): Protocol Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _protocol = protocol return self def with_uuid ( self , uuid : t . Union [ str , uuid4 ] = uuid4 ()): \"\"\" Add uuid to inbound builder Args: uuid (Union[str, uuid4], optional): Uuid. Defaults to uuid4(). Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" _client = Client ( id = uuid ) self . _settings = Setting ( clients = [ _client ]) . json () return self def with_network ( self , network : t . Literal [ \"ws\" , \"tcp\" , \"kcp\" , \"quic\" , \"http\" , \"grpc\" ]): \"\"\" Add network to inbound builder Args: network (Literal[\"ws\", \"tcp\", \"kcp\", \"quic\", \"http\", \"grpc\"]): Network Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _network = network return self def with_security ( self , security : str ): \"\"\" Add security to inbound builder Args: security (str): Security Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _security = security return self def with_server_name ( self , server_name : str ): \"\"\" Add server name to inbound builder Args: server_name (str): Server name Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _server_name = server_name return self def with_ws_path ( self , ws_path : str ): \"\"\" Add ws path to inbound builder Args: ws_path (str): Ws path Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _ws_path = ws_path return self def with_tag ( self , tag : str ): \"\"\" Add tag to inbound builder Args: tag (str): Tag Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _tag = tag return self def with_sniffing ( self , sniffing : bool ): \"\"\" Add sniffing to inbound builder Args: sniffing (bool): Sniffing Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _sniffing = sniffing return self def build ( self ) -> InboundsBase : \"\"\" Build inbound Returns: InboundsBase (InboundsBase): Inbound Raises: ValueError: If any parameter is None \"\"\" self . check () return InboundsBase ( user_id = self . _user_id , up = self . _up , down = self . _down , total = self . _total , remark = self . _remark , enable = self . _enable , expiry_time = self . _expiry_time , listen = self . _listen , port = self . _port , protocol = self . _protocol , settings = self . _settings , stream_settings = StreamSettings ( network = self . _network , security = self . _security , tlsSettings = TlsSettings ( serverName = self . _server_name ), wsSettings = WsSettings ( path = self . _ws_path ), ) . json (), tag = self . _tag , sniffing = Sniffing ( enabled = self . _sniffing ) . json (), ) build () Build inbound Returns: Name Type Description InboundsBase InboundsBase Inbound Raises: Type Description ValueError If any parameter is None Source code in xtls_crud/utils/builders/inbounds_builder.py 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 def build ( self ) -> InboundsBase : \"\"\" Build inbound Returns: InboundsBase (InboundsBase): Inbound Raises: ValueError: If any parameter is None \"\"\" self . check () return InboundsBase ( user_id = self . _user_id , up = self . _up , down = self . _down , total = self . _total , remark = self . _remark , enable = self . _enable , expiry_time = self . _expiry_time , listen = self . _listen , port = self . _port , protocol = self . _protocol , settings = self . _settings , stream_settings = StreamSettings ( network = self . _network , security = self . _security , tlsSettings = TlsSettings ( serverName = self . _server_name ), wsSettings = WsSettings ( path = self . _ws_path ), ) . json (), tag = self . _tag , sniffing = Sniffing ( enabled = self . _sniffing ) . json (), ) with_down ( down ) Add down to inbound builder Parameters: Name Type Description Default down Union [ int , str , datetime . datetime , datetime . timedelta , time_info . Time , time_info . TimeUnit ] Down required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 354 355 356 357 358 359 360 361 362 363 364 365 366 def with_down ( self , down : _ByteSize ): \"\"\" Add down to inbound builder Args: down (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Down Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _down = byte_size . from_string ( down ) return self with_enable ( enable ) Add enable to inbound builder Parameters: Name Type Description Default enable bool Enable required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 396 397 398 399 400 401 402 403 404 405 406 407 408 def with_enable ( self , enable : bool ): \"\"\" Add enable to inbound builder Args: enable (bool): Enable Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _enable = enable return self with_expiry_time ( expiry_time ) Add expiry time to inbound builder Parameters: Name Type Description Default expiry_time Union [ int , str , datetime . datetime , datetime . timedelta , time_info . Time , time_info . TimeUnit ] Expiry time required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 410 411 412 413 414 415 416 417 418 419 420 421 422 def with_expiry_time ( self , expiry_time : _ExpiryTime ): \"\"\" Add expiry time to inbound builder Args: expiry_time (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Expiry time Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _expiry_time = time_info . from_string ( expiry_time ) return self with_listen ( listen ) Add listen to inbound builder Parameters: Name Type Description Default listen str Listen required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 424 425 426 427 428 429 430 431 432 433 434 435 436 def with_listen ( self , listen : str ): \"\"\" Add listen to inbound builder Args: listen (str): Listen Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _listen = listen return self with_network ( network ) Add network to inbound builder Parameters: Name Type Description Default network Literal [ ws , tcp , kcp , quic , http , grpc ] Network required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 483 484 485 486 487 488 489 490 491 492 493 494 495 def with_network ( self , network : t . Literal [ \"ws\" , \"tcp\" , \"kcp\" , \"quic\" , \"http\" , \"grpc\" ]): \"\"\" Add network to inbound builder Args: network (Literal[\"ws\", \"tcp\", \"kcp\", \"quic\", \"http\", \"grpc\"]): Network Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _network = network return self with_port ( port ) Add port to inbound builder Parameters: Name Type Description Default port int Port required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 438 439 440 441 442 443 444 445 446 447 448 449 450 def with_port ( self , port : int ): \"\"\" Add port to inbound builder Args: port (int): Port Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _port = port return self with_protocol ( protocol ) Add protocol to inbound builder Parameters: Name Type Description Default protocol Literal [ vmess , vless , trojan , socks , http , shadowsocks , dokodemo-door ] Protocol required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 def with_protocol ( self , protocol : t . Literal [ \"vmess\" , \"vless\" , \"trojan\" , \"socks\" , \"http\" , \"shadowsocks\" , \"dokodemo-door\" ] ): \"\"\" Add protocol to inbound builder Args: protocol (Literal[\"vmess\", \"vless\", \"trojan\", \"socks\", \"http\", \"shadowsocks\", \"dokodemo-door\"]): Protocol Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _protocol = protocol return self with_remark ( remark ) Add remark to inbound builder Parameters: Name Type Description Default remark str Remark required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 382 383 384 385 386 387 388 389 390 391 392 393 394 def with_remark ( self , remark : str ): \"\"\" Add remark to inbound builder Args: remark (str): Remark Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _remark = remark return self with_security ( security ) Add security to inbound builder Parameters: Name Type Description Default security str Security required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 497 498 499 500 501 502 503 504 505 506 507 508 509 def with_security ( self , security : str ): \"\"\" Add security to inbound builder Args: security (str): Security Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _security = security return self with_server_name ( server_name ) Add server name to inbound builder Parameters: Name Type Description Default server_name str Server name required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 511 512 513 514 515 516 517 518 519 520 521 522 523 def with_server_name ( self , server_name : str ): \"\"\" Add server name to inbound builder Args: server_name (str): Server name Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _server_name = server_name return self with_sniffing ( sniffing ) Add sniffing to inbound builder Parameters: Name Type Description Default sniffing bool Sniffing required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 553 554 555 556 557 558 559 560 561 562 563 564 565 def with_sniffing ( self , sniffing : bool ): \"\"\" Add sniffing to inbound builder Args: sniffing (bool): Sniffing Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _sniffing = sniffing return self with_tag ( tag ) Add tag to inbound builder Parameters: Name Type Description Default tag str Tag required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 539 540 541 542 543 544 545 546 547 548 549 550 551 def with_tag ( self , tag : str ): \"\"\" Add tag to inbound builder Args: tag (str): Tag Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _tag = tag return self with_total ( total ) Add total to inbound builder Parameters: Name Type Description Default total int Total required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 368 369 370 371 372 373 374 375 376 377 378 379 380 def with_total ( self , total : int ): \"\"\" Add total to inbound builder Args: total (int): Total Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _total = total return self with_up ( up ) Add up to inbound builder Parameters: Name Type Description Default up Union [ int , str , datetime . datetime , datetime . timedelta , time_info . Time , time_info . TimeUnit ] Up required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 340 341 342 343 344 345 346 347 348 349 350 351 352 def with_up ( self , up : _ByteSize ): \"\"\" Add up to inbound builder Args: up (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Up Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _up = byte_size . from_string ( up ) return self with_user_id ( user_id ) Add user id to inbound builder Parameters: Name Type Description Default user_id int User id required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 326 327 328 329 330 331 332 333 334 335 336 337 338 def with_user_id ( self , user_id : int ): \"\"\" Add user id to inbound builder Args: user_id (int): User id Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _user_id = user_id return self with_uuid ( uuid = uuid4 ()) Add uuid to inbound builder Parameters: Name Type Description Default uuid Union [ str , uuid4 ] Uuid. Defaults to uuid4(). uuid4() Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 468 469 470 471 472 473 474 475 476 477 478 479 480 481 def with_uuid ( self , uuid : t . Union [ str , uuid4 ] = uuid4 ()): \"\"\" Add uuid to inbound builder Args: uuid (Union[str, uuid4], optional): Uuid. Defaults to uuid4(). Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" _client = Client ( id = uuid ) self . _settings = Setting ( clients = [ _client ]) . json () return self with_ws_path ( ws_path ) Add ws path to inbound builder Parameters: Name Type Description Default ws_path str Ws path required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 525 526 527 528 529 530 531 532 533 534 535 536 537 def with_ws_path ( self , ws_path : str ): \"\"\" Add ws path to inbound builder Args: ws_path (str): Ws path Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _ws_path = ws_path return self SettingBuilder Bases: Builder Setting Builder for Inbounds Example from xtls_crud.utils.builders.inbounds_builder import SettingBuilder setting = SettingBuilder () . with_clients ([ Client ( id = \"d36b31f0-44de-4576-a254-27d1d9410997\" , alterId = 0 )]) . with_disable_insecure_encryption ( True ) . build () print ( setting ) Output Setting ( clients =[ Client ( id = 'd36b31f0-44de-4576-a254-27d1d9410997' , alterId = 0 )] , disableInsecureEncryption = True ) Source code in xtls_crud/utils/builders/inbounds_builder.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 class SettingBuilder ( Builder ): \"\"\" Setting Builder for Inbounds ```python title=\"Example\" from xtls_crud.utils.builders.inbounds_builder import SettingBuilder setting = SettingBuilder().with_clients([Client(id=\"d36b31f0-44de-4576-a254-27d1d9410997\", alterId=0)]).with_disable_insecure_encryption(True).build() print(setting) ``` ```shell title=\"Output\" Setting(clients=[Client(id='d36b31f0-44de-4576-a254-27d1d9410997', alterId=0)], disableInsecureEncryption=True) ``` \"\"\" def __init__ ( self ): self . _clients = None self . _disable_insecure_encryption = None def with_clients ( self , clients : list [ Client ]): \"\"\" Add clients to setting builder Args: clients (list[Client]): Clients Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _clients = clients return self def with_disable_insecure_encryption ( self , disable_insecure_encryption : bool ): \"\"\" Add disable insecure encryption to setting builder Args: disable_insecure_encryption (bool): Disable insecure encryption Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _disable_insecure_encryption = disable_insecure_encryption return self def build ( self ) -> Setting : \"\"\" Build setting using given parameters Returns: Setting (Setting): Setting Raises: ValueError: If any parameter is None \"\"\" self . check () return Setting ( clients = self . _clients , disableInsecureEncryption = self . _disable_insecure_encryption ) build () Build setting using given parameters Returns: Name Type Description Setting Setting Setting Raises: Type Description ValueError If any parameter is None Source code in xtls_crud/utils/builders/inbounds_builder.py 143 144 145 146 147 148 149 150 151 152 153 154 155 def build ( self ) -> Setting : \"\"\" Build setting using given parameters Returns: Setting (Setting): Setting Raises: ValueError: If any parameter is None \"\"\" self . check () return Setting ( clients = self . _clients , disableInsecureEncryption = self . _disable_insecure_encryption ) with_clients ( clients ) Add clients to setting builder Parameters: Name Type Description Default clients list [ Client ] Clients required Returns: Name Type Description SettingBuilder SettingBuilder Setting builder Source code in xtls_crud/utils/builders/inbounds_builder.py 115 116 117 118 119 120 121 122 123 124 125 126 127 def with_clients ( self , clients : list [ Client ]): \"\"\" Add clients to setting builder Args: clients (list[Client]): Clients Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _clients = clients return self with_disable_insecure_encryption ( disable_insecure_encryption ) Add disable insecure encryption to setting builder Parameters: Name Type Description Default disable_insecure_encryption bool Disable insecure encryption required Returns: Name Type Description SettingBuilder SettingBuilder Setting builder Source code in xtls_crud/utils/builders/inbounds_builder.py 129 130 131 132 133 134 135 136 137 138 139 140 141 def with_disable_insecure_encryption ( self , disable_insecure_encryption : bool ): \"\"\" Add disable insecure encryption to setting builder Args: disable_insecure_encryption (bool): Disable insecure encryption Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _disable_insecure_encryption = disable_insecure_encryption return self SniffingBuilder Bases: Builder Sniffing Builder for Inbounds Example from xtls_crud.utils.builders.inbounds_builder import SniffingBuilder sniffing = SniffingBuilder () . with_dest_override ([ \"http\" , \"tls\" ]) . with_enabled ( True ) . build () print ( sniffing ) Output Sniffing ( destOverride =[ 'http' , 'tls' ] , enabled = True ) Source code in xtls_crud/utils/builders/inbounds_builder.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 class SniffingBuilder ( Builder ): \"\"\" Sniffing Builder for Inbounds ```python title=\"Example\" from xtls_crud.utils.builders.inbounds_builder import SniffingBuilder sniffing = SniffingBuilder().with_dest_override([\"http\", \"tls\"]).with_enabled(True).build() print(sniffing) ``` ```shell title=\"Output\" Sniffing(destOverride=['http', 'tls'], enabled=True) ``` \"\"\" def __init__ ( self ): self . _dest_override = None self . _enabled = None def with_dest_override ( self , dest_override : list [ str ]): \"\"\" Add dest override to sniffing builder Args: dest_override (list[str]): Dest override Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _dest_override = dest_override return self def with_enabled ( self , enabled : bool ): \"\"\" Add enabled to sniffing builder Args: enabled (bool): Enabled Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _enabled = enabled return self def build ( self ) -> Sniffing : \"\"\" Build sniffing using given parameters Returns: Sniffing (Sniffing): Sniffing Raises: ValueError: If any parameter is None \"\"\" self . check () return Sniffing ( destOverride = self . _dest_override , enabled = self . _enabled ) build () Build sniffing using given parameters Returns: Name Type Description Sniffing Sniffing Sniffing Raises: Type Description ValueError If any parameter is None Source code in xtls_crud/utils/builders/inbounds_builder.py 79 80 81 82 83 84 85 86 87 88 89 90 91 def build ( self ) -> Sniffing : \"\"\" Build sniffing using given parameters Returns: Sniffing (Sniffing): Sniffing Raises: ValueError: If any parameter is None \"\"\" self . check () return Sniffing ( destOverride = self . _dest_override , enabled = self . _enabled ) with_dest_override ( dest_override ) Add dest override to sniffing builder Parameters: Name Type Description Default dest_override list [ str ] Dest override required Returns: Name Type Description SniffingBuilder SniffingBuilder Sniffing builder Source code in xtls_crud/utils/builders/inbounds_builder.py 51 52 53 54 55 56 57 58 59 60 61 62 63 def with_dest_override ( self , dest_override : list [ str ]): \"\"\" Add dest override to sniffing builder Args: dest_override (list[str]): Dest override Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _dest_override = dest_override return self with_enabled ( enabled ) Add enabled to sniffing builder Parameters: Name Type Description Default enabled bool Enabled required Returns: Name Type Description SniffingBuilder SniffingBuilder Sniffing builder Source code in xtls_crud/utils/builders/inbounds_builder.py 65 66 67 68 69 70 71 72 73 74 75 76 77 def with_enabled ( self , enabled : bool ): \"\"\" Add enabled to sniffing builder Args: enabled (bool): Enabled Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _enabled = enabled return self","title":"inbounds_builder"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder","text":"Bases: Builder Easy Inbound Builder for Inbounds Example from xtls_crud.utils.builders.inbounds_builder import EasyInboundBuilder inbound = EasyInboundBuilder () . with_user_id ( 1 ) . with_up ( \"1gb\" ) . with_down ( \"1gb\" ) . with_total ( 0 ) . with_remark ( \"TEST\" ) . with_enable ( True ) . with_expiry_time ( \"1D\" ) . with_listen ( \" \" ) . with_port ( 1234 ) . with_protocol ( \"vmess\" ) . with_uuid ( uuid4 ()) . with_network ( \"ws\" ) . with_security ( \"tls\" ) . with_server_name ( \"v2ray.my-site.com\" ) . with_ws_path ( \"/test\" ) . with_tag ( \"inbound-49428\" ) . with_sniffing ( True ) . build () print ( inbound ) Output InboundsBase ( user_id = 1 , up = '1gb' , down = '1gb' , total = 0 , remark = 'TEST' , enable = True, expiry_time = TimeInfo ( time = 1 , unit = 'D' ) , listen = ' ' , port = 1234 , protocol = 'vmess' , settings = '{\"clients\": [{\"id\": \"b1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1\"}]}' , stream_settings = '{\"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": {\"serverName\": \"v2ray.my-site.com\"}, \"wsSettings\": {\"path\": \"/test\"}}' , tag = 'inbound-49428' , sniffing = '{\"enabled\": true}' ) Source code in xtls_crud/utils/builders/inbounds_builder.pyclass EasyInboundBuilder ( Builder ): \"\"\" Easy Inbound Builder for Inbounds ```python title=\"Example\" from xtls_crud.utils.builders.inbounds_builder import EasyInboundBuilder inbound = EasyInboundBuilder().with_user_id(1).with_up(\"1gb\").with_down(\"1gb\").with_total( 0).with_remark(\"TEST\").with_enable(True).with_expiry_time( \"1D\").with_listen(\" \").with_port(1234).with_protocol(\"vmess\").with_uuid(uuid4()).with_network( \"ws\").with_security(\"tls\").with_server_name(\"v2ray.my-site.com\").with_ws_path( \"/test\").with_tag(\"inbound-49428\").with_sniffing(True).build() print(inbound) ``` ```shell title=\"Output\" InboundsBase(user_id=1, up='1gb', down='1gb', total=0, remark='TEST', enable=True, expiry_time=TimeInfo(time=1, unit='D'), listen=' ', port=1234, protocol='vmess', settings='{\"clients\": [{\"id\": \"b1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1\"}]}', stream_settings='{\"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": {\"serverName\": \"v2ray.my-site.com\"}, \"wsSettings\": {\"path\": \"/test\"}}', tag='inbound-49428', sniffing='{\"enabled\": true}') ``` \"\"\" def __init__ ( self ): self . _user_id = None self . _up = None self . _down = None self . _total = None self . _remark = None self . _enable = None self . _expiry_time = None self . _listen = None self . _port = None self . _protocol = None self . _settings = None self . _network = None self . _security = None self . _server_name = None self . _ws_path = None self . _tag = None self . _sniffing = None def with_user_id ( self , user_id : int ): \"\"\" Add user id to inbound builder Args: user_id (int): User id Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _user_id = user_id return self def with_up ( self , up : _ByteSize ): \"\"\" Add up to inbound builder Args: up (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Up Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _up = byte_size . from_string ( up ) return self def with_down ( self , down : _ByteSize ): \"\"\" Add down to inbound builder Args: down (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Down Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _down = byte_size . from_string ( down ) return self def with_total ( self , total : int ): \"\"\" Add total to inbound builder Args: total (int): Total Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _total = total return self def with_remark ( self , remark : str ): \"\"\" Add remark to inbound builder Args: remark (str): Remark Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _remark = remark return self def with_enable ( self , enable : bool ): \"\"\" Add enable to inbound builder Args: enable (bool): Enable Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _enable = enable return self def with_expiry_time ( self , expiry_time : _ExpiryTime ): \"\"\" Add expiry time to inbound builder Args: expiry_time (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Expiry time Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _expiry_time = time_info . from_string ( expiry_time ) return self def with_listen ( self , listen : str ): \"\"\" Add listen to inbound builder Args: listen (str): Listen Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _listen = listen return self def with_port ( self , port : int ): \"\"\" Add port to inbound builder Args: port (int): Port Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _port = port return self def with_protocol ( self , protocol : t . Literal [ \"vmess\" , \"vless\" , \"trojan\" , \"socks\" , \"http\" , \"shadowsocks\" , \"dokodemo-door\" ] ): \"\"\" Add protocol to inbound builder Args: protocol (Literal[\"vmess\", \"vless\", \"trojan\", \"socks\", \"http\", \"shadowsocks\", \"dokodemo-door\"]): Protocol Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _protocol = protocol return self def with_uuid ( self , uuid : t . Union [ str , uuid4 ] = uuid4 ()): \"\"\" Add uuid to inbound builder Args: uuid (Union[str, uuid4], optional): Uuid. Defaults to uuid4(). Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" _client = Client ( id = uuid ) self . _settings = Setting ( clients = [ _client ]) . json () return self def with_network ( self , network : t . Literal [ \"ws\" , \"tcp\" , \"kcp\" , \"quic\" , \"http\" , \"grpc\" ]): \"\"\" Add network to inbound builder Args: network (Literal[\"ws\", \"tcp\", \"kcp\", \"quic\", \"http\", \"grpc\"]): Network Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _network = network return self def with_security ( self , security : str ): \"\"\" Add security to inbound builder Args: security (str): Security Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _security = security return self def with_server_name ( self , server_name : str ): \"\"\" Add server name to inbound builder Args: server_name (str): Server name Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _server_name = server_name return self def with_ws_path ( self , ws_path : str ): \"\"\" Add ws path to inbound builder Args: ws_path (str): Ws path Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _ws_path = ws_path return self def with_tag ( self , tag : str ): \"\"\" Add tag to inbound builder Args: tag (str): Tag Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _tag = tag return self def with_sniffing ( self , sniffing : bool ): \"\"\" Add sniffing to inbound builder Args: sniffing (bool): Sniffing Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _sniffing = sniffing return self def build ( self ) -> InboundsBase : \"\"\" Build inbound Returns: InboundsBase (InboundsBase): Inbound Raises: ValueError: If any parameter is None \"\"\" self . check () return InboundsBase ( user_id = self . _user_id , up = self . _up , down = self . _down , total = self . _total , remark = self . _remark , enable = self . _enable , expiry_time = self . _expiry_time , listen = self . _listen , port = self . _port , protocol = self . _protocol , settings = self . _settings , stream_settings = StreamSettings ( network = self . _network , security = self . _security , tlsSettings = TlsSettings ( serverName = self . _server_name ), wsSettings = WsSettings ( path = self . _ws_path ), ) . json (), tag = self . _tag , sniffing = Sniffing ( enabled = self . _sniffing ) . json (), )","title":"EasyInboundBuilder"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.build","text":"Build inbound Returns: Name Type Description InboundsBase InboundsBase Inbound Raises: Type Description ValueError If any parameter is None Source code in xtls_crud/utils/builders/inbounds_builder.py 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 def build ( self ) -> InboundsBase : \"\"\" Build inbound Returns: InboundsBase (InboundsBase): Inbound Raises: ValueError: If any parameter is None \"\"\" self . check () return InboundsBase ( user_id = self . _user_id , up = self . _up , down = self . _down , total = self . _total , remark = self . _remark , enable = self . _enable , expiry_time = self . _expiry_time , listen = self . _listen , port = self . _port , protocol = self . _protocol , settings = self . _settings , stream_settings = StreamSettings ( network = self . _network , security = self . _security , tlsSettings = TlsSettings ( serverName = self . _server_name ), wsSettings = WsSettings ( path = self . _ws_path ), ) . json (), tag = self . _tag , sniffing = Sniffing ( enabled = self . _sniffing ) . json (), )","title":"build()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_down","text":"Add down to inbound builder Parameters: Name Type Description Default down Union [ int , str , datetime . datetime , datetime . timedelta , time_info . Time , time_info . TimeUnit ] Down required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 354 355 356 357 358 359 360 361 362 363 364 365 366 def with_down ( self , down : _ByteSize ): \"\"\" Add down to inbound builder Args: down (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Down Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _down = byte_size . from_string ( down ) return self","title":"with_down()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_enable","text":"Add enable to inbound builder Parameters: Name Type Description Default enable bool Enable required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 396 397 398 399 400 401 402 403 404 405 406 407 408 def with_enable ( self , enable : bool ): \"\"\" Add enable to inbound builder Args: enable (bool): Enable Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _enable = enable return self","title":"with_enable()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_expiry_time","text":"Add expiry time to inbound builder Parameters: Name Type Description Default expiry_time Union [ int , str , datetime . datetime , datetime . timedelta , time_info . Time , time_info . TimeUnit ] Expiry time required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 410 411 412 413 414 415 416 417 418 419 420 421 422 def with_expiry_time ( self , expiry_time : _ExpiryTime ): \"\"\" Add expiry time to inbound builder Args: expiry_time (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Expiry time Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _expiry_time = time_info . from_string ( expiry_time ) return self","title":"with_expiry_time()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_listen","text":"Add listen to inbound builder Parameters: Name Type Description Default listen str Listen required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 424 425 426 427 428 429 430 431 432 433 434 435 436 def with_listen ( self , listen : str ): \"\"\" Add listen to inbound builder Args: listen (str): Listen Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _listen = listen return self","title":"with_listen()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_network","text":"Add network to inbound builder Parameters: Name Type Description Default network Literal [ ws , tcp , kcp , quic , http , grpc ] Network required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 483 484 485 486 487 488 489 490 491 492 493 494 495 def with_network ( self , network : t . Literal [ \"ws\" , \"tcp\" , \"kcp\" , \"quic\" , \"http\" , \"grpc\" ]): \"\"\" Add network to inbound builder Args: network (Literal[\"ws\", \"tcp\", \"kcp\", \"quic\", \"http\", \"grpc\"]): Network Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _network = network return self","title":"with_network()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_port","text":"Add port to inbound builder Parameters: Name Type Description Default port int Port required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 438 439 440 441 442 443 444 445 446 447 448 449 450 def with_port ( self , port : int ): \"\"\" Add port to inbound builder Args: port (int): Port Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _port = port return self","title":"with_port()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_protocol","text":"Add protocol to inbound builder Parameters: Name Type Description Default protocol Literal [ vmess , vless , trojan , socks , http , shadowsocks , dokodemo-door ] Protocol required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 def with_protocol ( self , protocol : t . Literal [ \"vmess\" , \"vless\" , \"trojan\" , \"socks\" , \"http\" , \"shadowsocks\" , \"dokodemo-door\" ] ): \"\"\" Add protocol to inbound builder Args: protocol (Literal[\"vmess\", \"vless\", \"trojan\", \"socks\", \"http\", \"shadowsocks\", \"dokodemo-door\"]): Protocol Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _protocol = protocol return self","title":"with_protocol()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_remark","text":"Add remark to inbound builder Parameters: Name Type Description Default remark str Remark required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 382 383 384 385 386 387 388 389 390 391 392 393 394 def with_remark ( self , remark : str ): \"\"\" Add remark to inbound builder Args: remark (str): Remark Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _remark = remark return self","title":"with_remark()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_security","text":"Add security to inbound builder Parameters: Name Type Description Default security str Security required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 497 498 499 500 501 502 503 504 505 506 507 508 509 def with_security ( self , security : str ): \"\"\" Add security to inbound builder Args: security (str): Security Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _security = security return self","title":"with_security()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_server_name","text":"Add server name to inbound builder Parameters: Name Type Description Default server_name str Server name required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 511 512 513 514 515 516 517 518 519 520 521 522 523 def with_server_name ( self , server_name : str ): \"\"\" Add server name to inbound builder Args: server_name (str): Server name Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _server_name = server_name return self","title":"with_server_name()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_sniffing","text":"Add sniffing to inbound builder Parameters: Name Type Description Default sniffing bool Sniffing required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 553 554 555 556 557 558 559 560 561 562 563 564 565 def with_sniffing ( self , sniffing : bool ): \"\"\" Add sniffing to inbound builder Args: sniffing (bool): Sniffing Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _sniffing = sniffing return self","title":"with_sniffing()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_tag","text":"Add tag to inbound builder Parameters: Name Type Description Default tag str Tag required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 539 540 541 542 543 544 545 546 547 548 549 550 551 def with_tag ( self , tag : str ): \"\"\" Add tag to inbound builder Args: tag (str): Tag Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _tag = tag return self","title":"with_tag()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_total","text":"Add total to inbound builder Parameters: Name Type Description Default total int Total required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 368 369 370 371 372 373 374 375 376 377 378 379 380 def with_total ( self , total : int ): \"\"\" Add total to inbound builder Args: total (int): Total Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _total = total return self","title":"with_total()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_up","text":"Add up to inbound builder Parameters: Name Type Description Default up Union [ int , str , datetime . datetime , datetime . timedelta , time_info . Time , time_info . TimeUnit ] Up required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 340 341 342 343 344 345 346 347 348 349 350 351 352 def with_up ( self , up : _ByteSize ): \"\"\" Add up to inbound builder Args: up (Union[int, str, datetime.datetime, datetime.timedelta, time_info.Time, time_info.TimeUnit]): Up Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _up = byte_size . from_string ( up ) return self","title":"with_up()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_user_id","text":"Add user id to inbound builder Parameters: Name Type Description Default user_id int User id required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 326 327 328 329 330 331 332 333 334 335 336 337 338 def with_user_id ( self , user_id : int ): \"\"\" Add user id to inbound builder Args: user_id (int): User id Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _user_id = user_id return self","title":"with_user_id()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_uuid","text":"Add uuid to inbound builder Parameters: Name Type Description Default uuid Union [ str , uuid4 ] Uuid. Defaults to uuid4(). uuid4() Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 468 469 470 471 472 473 474 475 476 477 478 479 480 481 def with_uuid ( self , uuid : t . Union [ str , uuid4 ] = uuid4 ()): \"\"\" Add uuid to inbound builder Args: uuid (Union[str, uuid4], optional): Uuid. Defaults to uuid4(). Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" _client = Client ( id = uuid ) self . _settings = Setting ( clients = [ _client ]) . json () return self","title":"with_uuid()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.EasyInboundBuilder.with_ws_path","text":"Add ws path to inbound builder Parameters: Name Type Description Default ws_path str Ws path required Returns: Name Type Description EasyInboundBuilder EasyInboundBuilder Inbound builder Source code in xtls_crud/utils/builders/inbounds_builder.py 525 526 527 528 529 530 531 532 533 534 535 536 537 def with_ws_path ( self , ws_path : str ): \"\"\" Add ws path to inbound builder Args: ws_path (str): Ws path Returns: EasyInboundBuilder (EasyInboundBuilder): Inbound builder \"\"\" self . _ws_path = ws_path return self","title":"with_ws_path()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SettingBuilder","text":"Bases: Builder Setting Builder for Inbounds Example from xtls_crud.utils.builders.inbounds_builder import SettingBuilder setting = SettingBuilder () . with_clients ([ Client ( id = \"d36b31f0-44de-4576-a254-27d1d9410997\" , alterId = 0 )]) . with_disable_insecure_encryption ( True ) . build () print ( setting ) Output Setting ( clients =[ Client ( id = 'd36b31f0-44de-4576-a254-27d1d9410997' , alterId = 0 )] , disableInsecureEncryption = True ) Source code in xtls_crud/utils/builders/inbounds_builder.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 class SettingBuilder ( Builder ): \"\"\" Setting Builder for Inbounds ```python title=\"Example\" from xtls_crud.utils.builders.inbounds_builder import SettingBuilder setting = SettingBuilder().with_clients([Client(id=\"d36b31f0-44de-4576-a254-27d1d9410997\", alterId=0)]).with_disable_insecure_encryption(True).build() print(setting) ``` ```shell title=\"Output\" Setting(clients=[Client(id='d36b31f0-44de-4576-a254-27d1d9410997', alterId=0)], disableInsecureEncryption=True) ``` \"\"\" def __init__ ( self ): self . _clients = None self . _disable_insecure_encryption = None def with_clients ( self , clients : list [ Client ]): \"\"\" Add clients to setting builder Args: clients (list[Client]): Clients Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _clients = clients return self def with_disable_insecure_encryption ( self , disable_insecure_encryption : bool ): \"\"\" Add disable insecure encryption to setting builder Args: disable_insecure_encryption (bool): Disable insecure encryption Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _disable_insecure_encryption = disable_insecure_encryption return self def build ( self ) -> Setting : \"\"\" Build setting using given parameters Returns: Setting (Setting): Setting Raises: ValueError: If any parameter is None \"\"\" self . check () return Setting ( clients = self . _clients , disableInsecureEncryption = self . _disable_insecure_encryption )","title":"SettingBuilder"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SettingBuilder.build","text":"Build setting using given parameters Returns: Name Type Description Setting Setting Setting Raises: Type Description ValueError If any parameter is None Source code in xtls_crud/utils/builders/inbounds_builder.py 143 144 145 146 147 148 149 150 151 152 153 154 155 def build ( self ) -> Setting : \"\"\" Build setting using given parameters Returns: Setting (Setting): Setting Raises: ValueError: If any parameter is None \"\"\" self . check () return Setting ( clients = self . _clients , disableInsecureEncryption = self . _disable_insecure_encryption )","title":"build()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SettingBuilder.with_clients","text":"Add clients to setting builder Parameters: Name Type Description Default clients list [ Client ] Clients required Returns: Name Type Description SettingBuilder SettingBuilder Setting builder Source code in xtls_crud/utils/builders/inbounds_builder.py 115 116 117 118 119 120 121 122 123 124 125 126 127 def with_clients ( self , clients : list [ Client ]): \"\"\" Add clients to setting builder Args: clients (list[Client]): Clients Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _clients = clients return self","title":"with_clients()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SettingBuilder.with_disable_insecure_encryption","text":"Add disable insecure encryption to setting builder Parameters: Name Type Description Default disable_insecure_encryption bool Disable insecure encryption required Returns: Name Type Description SettingBuilder SettingBuilder Setting builder Source code in xtls_crud/utils/builders/inbounds_builder.py 129 130 131 132 133 134 135 136 137 138 139 140 141 def with_disable_insecure_encryption ( self , disable_insecure_encryption : bool ): \"\"\" Add disable insecure encryption to setting builder Args: disable_insecure_encryption (bool): Disable insecure encryption Returns: SettingBuilder (SettingBuilder): Setting builder \"\"\" self . _disable_insecure_encryption = disable_insecure_encryption return self","title":"with_disable_insecure_encryption()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SniffingBuilder","text":"Bases: Builder Sniffing Builder for Inbounds Example from xtls_crud.utils.builders.inbounds_builder import SniffingBuilder sniffing = SniffingBuilder () . with_dest_override ([ \"http\" , \"tls\" ]) . with_enabled ( True ) . build () print ( sniffing ) Output Sniffing ( destOverride =[ 'http' , 'tls' ] , enabled = True ) Source code in xtls_crud/utils/builders/inbounds_builder.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 class SniffingBuilder ( Builder ): \"\"\" Sniffing Builder for Inbounds ```python title=\"Example\" from xtls_crud.utils.builders.inbounds_builder import SniffingBuilder sniffing = SniffingBuilder().with_dest_override([\"http\", \"tls\"]).with_enabled(True).build() print(sniffing) ``` ```shell title=\"Output\" Sniffing(destOverride=['http', 'tls'], enabled=True) ``` \"\"\" def __init__ ( self ): self . _dest_override = None self . _enabled = None def with_dest_override ( self , dest_override : list [ str ]): \"\"\" Add dest override to sniffing builder Args: dest_override (list[str]): Dest override Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _dest_override = dest_override return self def with_enabled ( self , enabled : bool ): \"\"\" Add enabled to sniffing builder Args: enabled (bool): Enabled Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _enabled = enabled return self def build ( self ) -> Sniffing : \"\"\" Build sniffing using given parameters Returns: Sniffing (Sniffing): Sniffing Raises: ValueError: If any parameter is None \"\"\" self . check () return Sniffing ( destOverride = self . _dest_override , enabled = self . _enabled )","title":"SniffingBuilder"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SniffingBuilder.build","text":"Build sniffing using given parameters Returns: Name Type Description Sniffing Sniffing Sniffing Raises: Type Description ValueError If any parameter is None Source code in xtls_crud/utils/builders/inbounds_builder.py 79 80 81 82 83 84 85 86 87 88 89 90 91 def build ( self ) -> Sniffing : \"\"\" Build sniffing using given parameters Returns: Sniffing (Sniffing): Sniffing Raises: ValueError: If any parameter is None \"\"\" self . check () return Sniffing ( destOverride = self . _dest_override , enabled = self . _enabled )","title":"build()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SniffingBuilder.with_dest_override","text":"Add dest override to sniffing builder Parameters: Name Type Description Default dest_override list [ str ] Dest override required Returns: Name Type Description SniffingBuilder SniffingBuilder Sniffing builder Source code in xtls_crud/utils/builders/inbounds_builder.py 51 52 53 54 55 56 57 58 59 60 61 62 63 def with_dest_override ( self , dest_override : list [ str ]): \"\"\" Add dest override to sniffing builder Args: dest_override (list[str]): Dest override Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _dest_override = dest_override return self","title":"with_dest_override()"},{"location":"reference/utils/builders/inbounds_builder/#xtls_crud.utils.builders.inbounds_builder.SniffingBuilder.with_enabled","text":"Add enabled to sniffing builder Parameters: Name Type Description Default enabled bool Enabled required Returns: Name Type Description SniffingBuilder SniffingBuilder Sniffing builder Source code in xtls_crud/utils/builders/inbounds_builder.py 65 66 67 68 69 70 71 72 73 74 75 76 77 def with_enabled ( self , enabled : bool ): \"\"\" Add enabled to sniffing builder Args: enabled (bool): Enabled Returns: SniffingBuilder (SniffingBuilder): Sniffing builder \"\"\" self . _enabled = enabled return self","title":"with_enabled()"}]}